import{s as Dt,a as r,f as p,l as v,c as l,g as h,h as ue,z as c,m as w,d as C,i as O,y as n,B as Pt}from"../chunks/scheduler.2e48bd10.js";import{S as kt,i as Ot,b as u,d as m,m as f,a as $,t as g,e as _}from"../chunks/index.ed958696.js";import{T as Lt,S as ce}from"../chunks/TableOfContents.c7a57465.js";import{C as Mt}from"../chunks/Code.23820852.js";import{j as Ht}from"../chunks/json.4d993fc0.js";import{A as fe}from"../chunks/A.2ad5f04f.js";import{T as At,B as jt}from"../chunks/Title.0bdb2a75.js";import{G as at}from"../chunks/GuideImage.920a4a56.js";function Et(d){let o;return{c(){o=v("OpenID Connect")},l(i){o=w(i,"OpenID Connect")},m(i,s){O(i,o,s)},d(i){i&&C(o)}}}function Rt(d){let o;return{c(){o=v("My Company Consent demo application")},l(i){o=w(i,"My Company Consent demo application")},m(i,s){O(i,o,s)},d(i){i&&C(o)}}}function St(d){let o;return{c(){o=v("https://login.sandbox.ioxio-dataspace.com/.well-known/openid-configuration")},l(i){o=w(i,"https://login.sandbox.ioxio-dataspace.com/.well-known/openid-configuration")},m(i,s){O(i,o,s)},d(i){i&&C(o)}}}function qt(d){let o=`
{
  "issuer": "https://login.sandbox.ioxio-dataspace.com",
  "authorization_endpoint": "https://login.sandbox.ioxio-dataspace.com/start-login",
  "token_endpoint": "https://login.sandbox.ioxio-dataspace.com/api/oauth/token",
  "jwks_uri": "https://login.sandbox.ioxio-dataspace.com/api/oauth/jwks",
  "userinfo_endpoint": "https://login.sandbox.ioxio-dataspace.com/api/oauth/userinfo",
  "end_session_endpoint": "https://login.sandbox.ioxio-dataspace.com/end-session",
  "response_types_supported": [
    "code"
  ],
  "subject_types_supported": [
    "public"
  ],
  "id_token_signing_alg_values_supported": [
    "RS256"
  ]
}
  `,i;return{c(){i=v(o)},l(s){i=w(s,o)},m(s,x){O(s,i,x)},p:Pt,d(s){s&&C(i)}}}function zt(d){let o;return{c(){o=v("Developer portal")},l(i){o=w(i,"Developer portal")},m(i,s){O(i,o,s)},d(i){i&&C(o)}}}function Gt(d){let o,i,s,x,t,L,$e,B,ot=`The login portals on the IOXIO Dataspaces are used to provide a unified way for users to log
      in to various different applications created by different vendors on the same Dataspace. The
      authentication is additionally used in the consent portal to grant consents and together with
      that in the product gateway and data sources or productizers to verify both authorization and
      consent when needed. This guide will focus on how you can use the login portal to authenticate
      your users.`,ge,M,_e,H,ve,T,we,xe,X,it=`This means applications built for an IOXIO Dataspace in the typical case only need to
      integrate with the login portal, and not the underlying authentication providers. This also
      means the login portal can be extended with support for other authentication schemes while
      still allowing the applications on the Dataspace to use the same OpenID Connect
      authentication.`,Ce,A,ye,V,st=`The login portal uses OpenID Connect with the code flow. You will need to decide how you are
      going to implement the OpenID Connect code flow for your application; you can either use some
      ready-made library or implement it yourself.`,be,j,Te,I,Ie,De,E,Pe,y,ke,W,rt="/.well-known/openid-configuration",Oe,D,Le,Me,J,lt="The content looks like this:",He,P,Ae,K,pt=`Many OpenID Connect/OAuth 2 clients require some of these endpoints directly instead of
      parsing them from the configuration using the discovery mechanisms.`,je,R,Ee,Q,ht=`You will need to register your application through the developer portal to get a Client ID and
      Client Secret.`,Re,S,Se,k,qe,ze,Z,dt="2. Go to the <em>My applications</em> page in the menu.",Ge,q,Ye,ee,ct="3. Press the <em>+ Add an application</em> button.",Fe,te,ut="4. Fill in the necessary details for your application:",Ne,z,Ue,ne,mt=`Pick a name for your own application and fill it in the <em>Application name</em> field.
      <br/>Add one or more <em>Redirect URIs</em> for your application, as well as
      <em>Logout redirect URIs</em>. These are the addresses the user is allowed to be redirected to
      when being returned to your application.`,Be,ae,ft="5. Create the application by pressing the <em>Create</em> button.",Xe,oe,$t="6. Your application is now created.",Ve,G,We,ie,gt=`As part of creating it, a <em>Client ID</em> was generated, as well as two
      <em>Client secrets</em>
      (so you can use one and rotate the other one). You will need the Client ID and either one of the
      two Client secrets when setting up your application. The buttons next to the client secrets allows
      you to show them, copy them and replace them. In case you need to edit any of the URIs or the name
      of the app you can change them and press the <em>Save</em> button.`,Je,Y,Ke,se,_t="Scopes",Qe,re,vt="At the moment the only supported <em>scope</em> is <em>openid</em> and it is required.",Ze,le,wt="ACR Values",et,pe,xt=`The <em>acr_values</em> is required and used to indicate which underlying authentication
      method the login portal will use for the authentication. For applications registered on the
      IOXIO Sandbox Dataspace, the value <em>fake-auth</em> is the only supported one and will use a
      fake authentication where the user can fill in any username that will be postfixed with a faked
      domain to form a fake-email address and no password. Please consult your Dataspace specific details
      for which values are supported in your Dataspace if you&#39;re creating an application for another
      Dataspace.`,tt,he,Ct="ID Token Hint",nt,de,yt=`When logging out the user the application must include the <em>id_token_hint</em> when
      redirecting the user to the <em>end_session_endpoint</em>.`,me;return o=new At({props:{title:d[0].guide.title}}),s=new jt({props:{path:d[0].path}}),L=new ce({props:{title:"Introduction"}}),M=new ce({props:{title:"Technical details"}}),T=new fe({props:{href:"https://openid.net/connect/",$$slots:{default:[Et]},$$scope:{ctx:d}}}),A=new ce({props:{title:"Using the login portal for authentication"}}),I=new fe({props:{href:"https://github.com/ioxio-dataspace/mycompany-consent-demo",$$slots:{default:[Rt]},$$scope:{ctx:d}}}),E=new ce({props:{title:"OpenID Configurations"}}),D=new fe({props:{href:"https://login.sandbox.ioxio-dataspace.com/.well-known/openid-configuration",$$slots:{default:[St]},$$scope:{ctx:d}}}),P=new Mt({props:{lang:Ht,$$slots:{default:[qt]},$$scope:{ctx:d}}}),R=new ce({props:{title:"Register your application in the developer portal"}}),k=new fe({props:{href:"https://developer.sandbox.ioxio-dataspace.com/",$$slots:{default:[zt]},$$scope:{ctx:d}}}),q=new at({props:{img:d[1].MY_APPLICATIONS_PAGE}}),z=new at({props:{img:d[1].CREATE_AN_APPLICATION_PAGE}}),G=new at({props:{img:d[1].THE_CREATED_APPLICATION}}),Y=new ce({props:{title:"Other configurations"}}),{c(){u(o.$$.fragment),i=r(),u(s.$$.fragment),x=r(),t=p("div"),u(L.$$.fragment),$e=r(),B=p("p"),B.textContent=ot,ge=r(),u(M.$$.fragment),_e=r(),H=p("p"),ve=v("The login portal is acting as both an "),u(T.$$.fragment),we=v(`
      identity providers (IDP) towards applications published on the Dataspace and as a relying party
      (RP) towards one or more 3rd party IDPs that might vary depending on the Dataspace. In essence
      it's acting a middle man for all the authentication on the Dataspace.`),xe=r(),X=p("p"),X.textContent=it,Ce=r(),u(A.$$.fragment),ye=r(),V=p("p"),V.textContent=st,be=r(),j=p("p"),Te=v(`For a really simple example of how the code flow authentication can be built, you can have a
      look at the codebase for the
      `),u(I.$$.fragment),Ie=v(`. It's lacking a lot of cleanup related things, but should be enough to show how you could
      build it.`),De=r(),u(E.$$.fragment),Pe=r(),y=p("p"),ke=v(`The login portal supports the OpenID Connect Discovery, thus most relevant configurations for
      OpenID Connect clients can be found at the path `),W=p("em"),W.textContent=rt,Oe=v(`,
      for example on the sandbox at the address `),u(D.$$.fragment),Le=v("."),Me=r(),J=p("p"),J.textContent=lt,He=r(),u(P.$$.fragment),Ae=r(),K=p("p"),K.textContent=pt,je=r(),u(R.$$.fragment),Ee=r(),Q=p("p"),Q.textContent=ht,Re=r(),S=p("p"),Se=v("1. Login in to the "),u(k.$$.fragment),qe=v("."),ze=r(),Z=p("p"),Z.innerHTML=dt,Ge=r(),u(q.$$.fragment),Ye=r(),ee=p("p"),ee.innerHTML=ct,Fe=r(),te=p("p"),te.textContent=ut,Ne=r(),u(z.$$.fragment),Ue=r(),ne=p("p"),ne.innerHTML=mt,Be=r(),ae=p("p"),ae.innerHTML=ft,Xe=r(),oe=p("p"),oe.textContent=$t,Ve=r(),u(G.$$.fragment),We=r(),ie=p("p"),ie.innerHTML=gt,Je=r(),u(Y.$$.fragment),Ke=r(),se=p("h3"),se.textContent=_t,Qe=r(),re=p("p"),re.innerHTML=vt,Ze=r(),le=p("h3"),le.textContent=wt,et=r(),pe=p("p"),pe.innerHTML=xt,tt=r(),he=p("h3"),he.textContent=Ct,nt=r(),de=p("p"),de.innerHTML=yt},l(a){m(o.$$.fragment,a),i=l(a),m(s.$$.fragment,a),x=l(a),t=h(a,"DIV",{});var e=ue(t);m(L.$$.fragment,e),$e=l(e),B=h(e,"P",{"data-svelte-h":!0}),c(B)!=="svelte-1evxjjq"&&(B.textContent=ot),ge=l(e),m(M.$$.fragment,e),_e=l(e),H=h(e,"P",{});var F=ue(H);ve=w(F,"The login portal is acting as both an "),m(T.$$.fragment,F),we=w(F,`
      identity providers (IDP) towards applications published on the Dataspace and as a relying party
      (RP) towards one or more 3rd party IDPs that might vary depending on the Dataspace. In essence
      it's acting a middle man for all the authentication on the Dataspace.`),F.forEach(C),xe=l(e),X=h(e,"P",{"data-svelte-h":!0}),c(X)!=="svelte-cven7e"&&(X.textContent=it),Ce=l(e),m(A.$$.fragment,e),ye=l(e),V=h(e,"P",{"data-svelte-h":!0}),c(V)!=="svelte-lcwxq7"&&(V.textContent=st),be=l(e),j=h(e,"P",{});var N=ue(j);Te=w(N,`For a really simple example of how the code flow authentication can be built, you can have a
      look at the codebase for the
      `),m(I.$$.fragment,N),Ie=w(N,`. It's lacking a lot of cleanup related things, but should be enough to show how you could
      build it.`),N.forEach(C),De=l(e),m(E.$$.fragment,e),Pe=l(e),y=h(e,"P",{});var b=ue(y);ke=w(b,`The login portal supports the OpenID Connect Discovery, thus most relevant configurations for
      OpenID Connect clients can be found at the path `),W=h(b,"EM",{"data-svelte-h":!0}),c(W)!=="svelte-i8jick"&&(W.textContent=rt),Oe=w(b,`,
      for example on the sandbox at the address `),m(D.$$.fragment,b),Le=w(b,"."),b.forEach(C),Me=l(e),J=h(e,"P",{"data-svelte-h":!0}),c(J)!=="svelte-1x0tcqx"&&(J.textContent=lt),He=l(e),m(P.$$.fragment,e),Ae=l(e),K=h(e,"P",{"data-svelte-h":!0}),c(K)!=="svelte-1xns3jy"&&(K.textContent=pt),je=l(e),m(R.$$.fragment,e),Ee=l(e),Q=h(e,"P",{"data-svelte-h":!0}),c(Q)!=="svelte-5oxtde"&&(Q.textContent=ht),Re=l(e),S=h(e,"P",{});var U=ue(S);Se=w(U,"1. Login in to the "),m(k.$$.fragment,U),qe=w(U,"."),U.forEach(C),ze=l(e),Z=h(e,"P",{"data-svelte-h":!0}),c(Z)!=="svelte-dx6xui"&&(Z.innerHTML=dt),Ge=l(e),m(q.$$.fragment,e),Ye=l(e),ee=h(e,"P",{"data-svelte-h":!0}),c(ee)!=="svelte-m5cxj"&&(ee.innerHTML=ct),Fe=l(e),te=h(e,"P",{"data-svelte-h":!0}),c(te)!=="svelte-5pj7ca"&&(te.textContent=ut),Ne=l(e),m(z.$$.fragment,e),Ue=l(e),ne=h(e,"P",{"data-svelte-h":!0}),c(ne)!=="svelte-wp9v6s"&&(ne.innerHTML=mt),Be=l(e),ae=h(e,"P",{"data-svelte-h":!0}),c(ae)!=="svelte-gkr7u0"&&(ae.innerHTML=ft),Xe=l(e),oe=h(e,"P",{"data-svelte-h":!0}),c(oe)!=="svelte-1bs1vwv"&&(oe.textContent=$t),Ve=l(e),m(G.$$.fragment,e),We=l(e),ie=h(e,"P",{"data-svelte-h":!0}),c(ie)!=="svelte-1cjgpk7"&&(ie.innerHTML=gt),Je=l(e),m(Y.$$.fragment,e),Ke=l(e),se=h(e,"H3",{"data-svelte-h":!0}),c(se)!=="svelte-118kn2l"&&(se.textContent=_t),Qe=l(e),re=h(e,"P",{"data-svelte-h":!0}),c(re)!=="svelte-1ypsbr7"&&(re.innerHTML=vt),Ze=l(e),le=h(e,"H3",{"data-svelte-h":!0}),c(le)!=="svelte-ju4k"&&(le.textContent=wt),et=l(e),pe=h(e,"P",{"data-svelte-h":!0}),c(pe)!=="svelte-18frntm"&&(pe.innerHTML=xt),tt=l(e),he=h(e,"H3",{"data-svelte-h":!0}),c(he)!=="svelte-17ottdh"&&(he.textContent=Ct),nt=l(e),de=h(e,"P",{"data-svelte-h":!0}),c(de)!=="svelte-ie20z"&&(de.innerHTML=yt),e.forEach(C)},m(a,e){f(o,a,e),O(a,i,e),f(s,a,e),O(a,x,e),O(a,t,e),f(L,t,null),n(t,$e),n(t,B),n(t,ge),f(M,t,null),n(t,_e),n(t,H),n(H,ve),f(T,H,null),n(H,we),n(t,xe),n(t,X),n(t,Ce),f(A,t,null),n(t,ye),n(t,V),n(t,be),n(t,j),n(j,Te),f(I,j,null),n(j,Ie),n(t,De),f(E,t,null),n(t,Pe),n(t,y),n(y,ke),n(y,W),n(y,Oe),f(D,y,null),n(y,Le),n(t,Me),n(t,J),n(t,He),f(P,t,null),n(t,Ae),n(t,K),n(t,je),f(R,t,null),n(t,Ee),n(t,Q),n(t,Re),n(t,S),n(S,Se),f(k,S,null),n(S,qe),n(t,ze),n(t,Z),n(t,Ge),f(q,t,null),n(t,Ye),n(t,ee),n(t,Fe),n(t,te),n(t,Ne),f(z,t,null),n(t,Ue),n(t,ne),n(t,Be),n(t,ae),n(t,Xe),n(t,oe),n(t,Ve),f(G,t,null),n(t,We),n(t,ie),n(t,Je),f(Y,t,null),n(t,Ke),n(t,se),n(t,Qe),n(t,re),n(t,Ze),n(t,le),n(t,et),n(t,pe),n(t,tt),n(t,he),n(t,nt),n(t,de),me=!0},p(a,e){const F={};e&1&&(F.title=a[0].guide.title),o.$set(F);const N={};e&1&&(N.path=a[0].path),s.$set(N);const b={};e&4&&(b.$$scope={dirty:e,ctx:a}),T.$set(b);const U={};e&4&&(U.$$scope={dirty:e,ctx:a}),I.$set(U);const bt={};e&4&&(bt.$$scope={dirty:e,ctx:a}),D.$set(bt);const Tt={};e&4&&(Tt.$$scope={dirty:e,ctx:a}),P.$set(Tt);const It={};e&4&&(It.$$scope={dirty:e,ctx:a}),k.$set(It)},i(a){me||($(o.$$.fragment,a),$(s.$$.fragment,a),$(L.$$.fragment,a),$(M.$$.fragment,a),$(T.$$.fragment,a),$(A.$$.fragment,a),$(I.$$.fragment,a),$(E.$$.fragment,a),$(D.$$.fragment,a),$(P.$$.fragment,a),$(R.$$.fragment,a),$(k.$$.fragment,a),$(q.$$.fragment,a),$(z.$$.fragment,a),$(G.$$.fragment,a),$(Y.$$.fragment,a),me=!0)},o(a){g(o.$$.fragment,a),g(s.$$.fragment,a),g(L.$$.fragment,a),g(M.$$.fragment,a),g(T.$$.fragment,a),g(A.$$.fragment,a),g(I.$$.fragment,a),g(E.$$.fragment,a),g(D.$$.fragment,a),g(P.$$.fragment,a),g(R.$$.fragment,a),g(k.$$.fragment,a),g(q.$$.fragment,a),g(z.$$.fragment,a),g(G.$$.fragment,a),g(Y.$$.fragment,a),me=!1},d(a){a&&(C(i),C(x),C(t)),_(o,a),_(s,a),_(L),_(M),_(T),_(A),_(I),_(E),_(D),_(P),_(R),_(k),_(q),_(z),_(G),_(Y)}}}function Yt(d){let o,i;return o=new Lt({props:{$$slots:{default:[Gt]},$$scope:{ctx:d}}}),{c(){u(o.$$.fragment)},l(s){m(o.$$.fragment,s)},m(s,x){f(o,s,x),i=!0},p(s,[x]){const t={};x&5&&(t.$$scope={dirty:x,ctx:s}),o.$set(t)},i(s){i||($(o.$$.fragment,s),i=!0)},o(s){g(o.$$.fragment,s),i=!1},d(s){_(o,s)}}}function Ft(d,o,i){let{data:s}=o;const x=s.images;return d.$$set=t=>{"data"in t&&i(0,s=t.data)},[s,x]}class Qt extends kt{constructor(o){super(),Ot(this,o,Ft,Yt,Dt,{data:0})}}export{Qt as component};
