import{s as ms,a as l,f as u,l as w,c as r,g as f,h as U,m as v,d as n,z as m,i as a,y,B as mt}from"../chunks/scheduler.2e48bd10.js";import{S as $s,i as hs,b as $,d as h,m as d,a as g,t as c,e as _}from"../chunks/index.ed958696.js";import{T as ds,S as A}from"../chunks/TableOfContents.c7a57465.js";import{C as Wn}from"../chunks/Code.23820852.js";import{j as ma}from"../chunks/json.4d993fc0.js";import{b as gs}from"../chunks/bash.7e4226ac.js";import{T as cs,B as _s}from"../chunks/Title.0bdb2a75.js";import{G as vt}from"../chunks/urls.6350a949.js";import{G as x}from"../chunks/GuideImage.920a4a56.js";import{A as E}from"../chunks/A.2ad5f04f.js";function ws(p){let o;return{c(){o=w("IOXIO Sandbox Dataspace")},l(s){o=v(s,"IOXIO Sandbox Dataspace")},m(s,i){a(s,o,i)},d(s){s&&n(o)}}}function vs(p){let o=vt.BUILD_DATA_DEF.title+"",s;return{c(){s=w(o)},l(i){s=v(i,o)},m(i,b){a(i,s,b)},p:mt,d(i){i&&n(s)}}}function ys(p){let o;return{c(){o=w("OpenAPI Spec")},l(s){o=v(s,"OpenAPI Spec")},m(s,i){a(s,o,i)},d(s){s&&n(o)}}}function bs(p){let o;return{c(){o=w("SwaggerUI")},l(s){o=v(s,"SwaggerUI")},m(s,i){a(s,o,i)},d(s){s&&n(o)}}}function Ts(p){let o;return{c(){o=w("ReDoc")},l(s){o=v(s,"ReDoc")},m(s,i){a(s,o,i)},d(s){s&&n(o)}}}function xs(p){let o=`
{
  "lat": 60.192059,
  "lon": 24.945831,
  "when": "2019-10-12T07:20:50.52Z"
}
`,s;return{c(){s=w(o)},l(i){s=v(i,o)},m(i,b){a(i,s,b)},p:mt,d(i){i&&n(s)}}}function Ps(p){let o=`
{
  "temperature": 17.3,
  "humidity": 72,
  "pressure": 1007,
  "wind_speed": 2.1,
  "wind_direction": 220,
  "precipitation": 120,
  "visibility": 320
}
`,s;return{c(){s=w(o)},l(i){s=v(i,o)},m(i,b){a(i,s,b)},p:mt,d(i){i&&n(s)}}}function Is(p){let o;return{c(){o=w("simple example implementation")},l(s){o=v(s,"simple example implementation")},m(s,i){a(s,o,i)},d(s){s&&n(o)}}}function Cs(p){let o=vt.VERIFYING_API_TOKENS.title+"",s;return{c(){s=w(o)},l(i){s=v(i,o)},m(i,b){a(i,s,b)},p:mt,d(i){i&&n(s)}}}function ks(p){let o=vt.VERIFYING_API_TOKENS.title+"",s;return{c(){s=w(o)},l(i){s=v(i,o)},m(i,b){a(i,s,b)},p:mt,d(i){i&&n(s)}}}function Ls(p){let o;return{c(){o=w("Test your data source")},l(s){o=v(s,"Test your data source")},m(s,i){a(s,o,i)},d(s){s&&n(o)}}}function Ms(p){let o;return{c(){o=w("Test your data source using Swagger UI")},l(s){o=v(s,"Test your data source using Swagger UI")},m(s,i){a(s,o,i)},d(s){s&&n(o)}}}function As(p){let o=`
  curl -X POST "https://gateway.sandbox.ioxio-dataspace.com/Meteorology/Weather_v0.1?source=ioxio_dataspace_guides" \\
  -H "Content-Type: application/json" \\
  -H "X-API-KEY: YOUR_KEY" \\
  -d '{"lat": 60.192059, "lon": 24.945831}'
`,s;return{c(){s=w(o)},l(i){s=v(i,o)},m(i,b){a(i,s,b)},p:mt,d(i){i&&n(s)}}}function Es(p){let o=`
  {
  "temperature":-4.5,
  "humidity":56,
  "pressure":994,
  "windSpeed":7.4,
  "windDirection":33,
  "precipitation":0.9,
  "visibility":45130
}
`,s;return{c(){s=w(o)},l(i){s=v(i,o)},m(i,b){a(i,s,b)},p:mt,d(i){i&&n(s)}}}function Hs(p){let o,s,i,b,P,yt,D,Yn,q,Gn,bt,ne,Tt,ae,$a="Data that you want to provide.",xt,se,ha="A data product definition that matches the data you have available.",Pt,ie,da=`Ability to host an API that responds to <em>POST</em> requests on the public internet over the https
    protocol.`,It,oe,Ct,le,ga="You can find the available <em>Data definitions</em> in the menu.",kt,re,Lt,R,jn,N,Fn,Mt,ue,At,T,Kn,$t,ca="Meteorology/Weather_v0.1",Xn,W,Bn,Y,zn,G,Vn,Et,fe,_a=`In this case it means that an API which accepts a <em>POST</em> request at the path
    <em>/Meteorology/Weather_v0.1</em>
    needs to be created. It could for example be hosted at
    <em>https://data-source-guide-example.demos.ioxio.dev/Meteorology/Weather_v0.1</em>.`,Ht,pe,wa="This endpoint will expect a <em>POST</em> request with a JSON payload, like this:",St,j,Ot,me,va="It needs to respond with a JSON payload that could look like this:",Ut,F,Dt,K,Jn,X,Zn,qt,$e,Rt,he,ya=`Deploy and host your API anywhere you prefer. Note that IOXIO doesn&#39;t offer API hosting. For the
    next steps, you&#39;ll need the base URL (i.e., the part before the data product path) where your
    API is accessible, for example:
    <em>https://data-source-guide-example.demos.ioxio.dev</em>.`,Nt,de,Wt,ge,ba="Ensure you have a group",Yt,ce,Ta=`Go to the dataspace and click on <em>My groups</em>. If you don&#39;t have a group, you will need to
    create one. The name of the group should relate to yourself, your company, or the data source.
    Some dataspaces have moderated group creation. If the page has a notice saying so, and you are
    unable to create the group yourself, please follow the instructions visible in the page to get a
    group. Note, that if your organization already has a group, you will need to ask your group&#39;s
    owner to invite you to the existing group.`,Gt,_e,xa="Add your data source",jt,we,Pa=`Use the menu to navigate to <em>My data sources</em>. Press the <em>+ Add</em> a data source
    button. In the <em>Data product</em> dropdown pick the definition that matches your API. Pick one
    of your groups in the dropdown for groups.`,Ft,ve,Ia=`If you want to publish multiple data sources for the same definition using the same group, you
    can add a variant name to distinguish them from each other. Most likely you don&#39;t want to use
    this for your first data source and thus want to leave the field empty. In the <em>Base URL</em>
    enter the base URL at which your deployment is available. The help text shows where the API endpoint
    is expected to be available. The Base URL will not be displayed to other users and is only used by
    the dataspace to connect to your integration. All other applications must connect through the dataspace.`,Kt,ye,Ca="There's three options for the visibility:",Xt,be,ka=`<li><b>Private</b> - The data source will be hidden from other users on the dataspace and
      protected by an additional <em>X-Preview-Token</em> header. Should be used when you want to test
      your own data source before making it available to others.</li> <li><b>Unlisted</b> - The data source can be accessed by anyone who knows it exists, but will not be
      published in any listing of data sources on the dataspace.</li> <li><b>Published</b> - The data source will be published on the dataspace for others to see.</li>`,Bt,Te,La=`The access to the data source can be controlled by different options (all options might not be
    available on all dataspaces):`,zt,B,ht,Ma="<b>No access control</b> - The dataspace will allow anyone to request data from the data source.",Qn,C,dt,Aa="Dataspace verified API tokens",ea,gt,Ea="X-API-Key",ta,ct,Ha="Access control keys",na,z,aa,Vt,xe,Sa=`For this tutorial, let&#39;s choose <em>Unlisted</em> for the visibility and
    <em>Dataspace verified API tokens</em> for access control. The filled in form would look like this:`,Jt,Pe,Zt,Ie,Oa="Press the <em>Create</em> button to create the data source.",Qt,Ce,en,ke,Ua=`As we selected <em>Dataspace verified API tokens</em> when creating the data source, you will
    see the
    <em>Allowed groups</em> section at the bottom of the page once the source has been created:`,tn,Le,nn,Me,Da=`Each group that should be able to access data from this data source, needs to be in this list.
    Your own group is added automatically, but if you want to add other groups, click
    <em>+ Add</em>, type in the name of the group, click <em>+ Add</em> again.`,an,L,sa,V,ia,_t,qa="sub",oa,sn,M,la,J,ra,Z,ua,on,Ae,ln,Ee,Ra=`You should now be able to test your own data source by querying it through the product gateway.
    Below the <em>Source</em> field, you can also see the URL where you can make requests to the data
    source.`,rn,He,un,H,fa,wt,Na="Access control keys",pa,Se,fn,Oe,Wa="Find your data source in the list, click <em>View</em>.",pn,Ue,mn,De,Ya=`Then you can generate an API token by clicking the <em>Generate API token</em> button or using the
    cURL example.`,$n,qe,hn,Re,Ga=`For example, you can use the <em>cURL</em> command-line tool to query it like this. Make sure to
    replace the URL, adjust the data to match your data source&#39;s expected payload, and include a
    recently generated token in the <em>X-API-KEY</em> header.`,dn,Ne,ja=`Note: As long as your datasource remains published or unlisted, you will not need to use the
    <em>X-Preview-Token</em>
    header. If the access control mode is changed to private, the header should be added to the request
    (the value can be found on the data source <em>Edit</em> page).`,gn,Q,cn,We,Fa="A successful response will look something like:",_n,ee,wn,Ye,Ka=`In case you make a request that causes an unexpected response to be generated by your
    integration, like a 404 Not found message, the product gateway will respond with a 502 to
    indicate there was an error in the integration:`,vn,Ge,Xa=`Note: if the data source response has errors, it gets logged into the errors section on the data
    source edit page after a short while:`,yn,je,bn,Fe,Tn,Ke,Ba="The quickest and easiest way to test your data source is using these steps with Swagger UI.",xn,Xe,za=`From the edit data source view, you can quickly jump to the Access control keys for your source
    by pressing the key icon in the list of <em>Allowed groups</em> section.`,Pn,Be,In,ze,Va=`Alternatively you can open the <em>Access control keys</em> from the menu and open the details for
    your own source.`,Cn,Ve,Ja=`On the View access control keys page press the <em>Generate API token</em> button. This will for
    convenience use one of the long-lived access control keys and generate a short lived API token (typically
    valid for about an hour) and display it to you for easier testing.`,kn,Je,Ln,Ze,Za="Copy the generated API token, make a note of the source value and open the <em>Swagger UI</em> link.",Mn,Qe,An,et,Qa="Press the <em>Try it out</em> button in Swagger UI.",En,tt,Hn,nt,es=`Enter the name of the source (the one you were requested earlier to make a note of) and paste in
    the API token you copied in the <em>x-api-key</em> field. Do any changes you want to the request
    body and press the
    <em>Execute</em> button to perform the request.`,Sn,at,On,st,ts=`Swagger UI will in the <em>Responses</em> section show you the curl command corresponding to the
    request that it made and also show the status code and body of the response.`,Un,it,Dn,ot,ns=`Check the status and response is as you expect or in case of an error check the details in the
    error message. Please note that the API tokens are typically valid for only about an hour, so if
    you do a lot of testing you might encounter the
    <em>API token is not valid for this source or it has expired</em>
    message, which means you need to go back to the Access control keys page and generate a fresh one
    to use.`,qn,lt,Rn,rt,as=`When you&#39;ve verified the data source works as intended you can publish the data source by
    selecting it in the list of your data sources, pressing the <em>Edit</em> button and switching
    the visibility to <em>Published</em> and press the <em>Save</em> button. When it&#39;s published, it
    will be listed to all users in the <em>Available data sources</em> section.`,Nn;return o=new cs({props:{title:p[0].guide.title}}),i=new _s({props:{path:p[0].path}}),P=new A({props:{title:"Introduction"}}),q=new E({props:{href:"https://sandbox.ioxio-dataspace.com/",$$slots:{default:[ws]},$$scope:{ctx:p}}}),ne=new A({props:{title:"Prerequisites"}}),oe=new A({props:{title:"Choosing a data definition for your source"}}),re=new x({props:{compact:!0,img:p[1].DEFINITIONS}}),N=new E({props:{href:vt.BUILD_DATA_DEF.href,$$slots:{default:[vs]},$$scope:{ctx:p}}}),ue=new A({props:{title:"What are we building?"}}),W=new E({props:{href:"https://raw.githubusercontent.com/ioxio-dataspace/sandbox-definitions/refs/heads/main/DataProducts/Meteorology/Weather_v0.1.json",$$slots:{default:[ys]},$$scope:{ctx:p}}}),Y=new E({props:{href:"https://gateway.sandbox.ioxio-dataspace.com/docs#/Data%20Products/Meteorology_Weather_v0_1_Meteorology_Weather_v0_1_post",$$slots:{default:[bs]},$$scope:{ctx:p}}}),G=new E({props:{href:"https://gateway.sandbox.ioxio-dataspace.com/redoc#tag/Data-Products/operation/Meteorology_Weather_v0_1_Meteorology_Weather_v0_1_post",$$slots:{default:[Ts]},$$scope:{ctx:p}}}),j=new Wn({props:{lang:ma,$$slots:{default:[xs]},$$scope:{ctx:p}}}),F=new Wn({props:{lang:ma,$$slots:{default:[Ps]},$$scope:{ctx:p}}}),X=new E({props:{href:"https://github.com/ioxio-dataspace/data-source-guide-example",$$slots:{default:[Is]},$$scope:{ctx:p}}}),$e=new A({props:{title:"Deploy and host your API"}}),de=new A({props:{title:"Register your data source in the Dataspace"}}),z=new E({props:{href:vt.VERIFYING_API_TOKENS.href,$$slots:{default:[Cs]},$$scope:{ctx:p}}}),Pe=new x({props:{img:p[1].CREATE_NEW_DS}}),Ce=new A({props:{title:"Managing access to the data source"}}),Le=new x({props:{img:p[1].ALLOWED_GROUPS}}),V=new E({props:{href:vt.VERIFYING_API_TOKENS.href,$$slots:{default:[ks]},$$scope:{ctx:p}}}),J=new E({props:{href:"#test-your-data-source",$$slots:{default:[Ls]},$$scope:{ctx:p}}}),Z=new E({props:{href:"#test-your-data-source-using-swagger-ui",$$slots:{default:[Ms]},$$scope:{ctx:p}}}),Ae=new A({props:{title:"Test your data source"}}),He=new x({props:{img:p[1].SOURCE}}),Se=new x({props:{compact:!0,img:p[1].KEYS}}),Ue=new x({props:{img:p[1].SOURCE_ACCESS_CONTROL}}),qe=new x({props:{img:p[1].API_TOKEN}}),Q=new Wn({props:{lang:gs,$$slots:{default:[As]},$$scope:{ctx:p}}}),ee=new Wn({props:{lang:ma,$$slots:{default:[Es]},$$scope:{ctx:p}}}),je=new x({props:{img:p[1].ERRORS}}),Fe=new A({props:{title:"Test your data source using Swagger UI"}}),Be=new x({props:{img:p[1].ALLOWED_GROUPS_KEY}}),Je=new x({props:{img:p[1].GENERATE_API_TOKEN_BUTTON}}),Qe=new x({props:{img:p[1].COPY_API_TOKEN_AND_OPEN_SWAGGER_UI}}),tt=new x({props:{img:p[1].SWAGGER_UI_TRY_IT_OUT}}),at=new x({props:{img:p[1].SWAGGER_UI_FILLED_IN_FORM}}),it=new x({props:{img:p[1].SWAGGER_UI_RESPONSE}}),lt=new A({props:{title:"Publish the data source"}}),{c(){$(o.$$.fragment),s=l(),$(i.$$.fragment),b=l(),$(P.$$.fragment),yt=l(),D=u("p"),Yn=w(`In this guide we will explain how to build a new data source so it can be queried through the
    product gateway using
    `),$(q.$$.fragment),Gn=w(`. These steps are the
    same on all IOXIO Dataspaces, while some might miss the particular data products mentioned here.`),bt=l(),$(ne.$$.fragment),Tt=l(),ae=u("li"),ae.textContent=$a,xt=l(),se=u("li"),se.textContent=ha,Pt=l(),ie=u("li"),ie.innerHTML=da,It=l(),$(oe.$$.fragment),Ct=l(),le=u("p"),le.innerHTML=ga,kt=l(),$(re.$$.fragment),Lt=l(),R=u("p"),jn=w(`If there is no definition for the type of data you want to provide, you can create your own
    definition by following the `),$(N.$$.fragment),Fn=w(" guide."),Mt=l(),$(ue.$$.fragment),At=l(),T=u("p"),Kn=w(`We need to build an integration that provides an API matching one of the available definitions.
    We'll use `),$t=u("em"),$t.textContent=ca,Xn=w(` as our reference example (view
    `),$(W.$$.fragment),Bn=w(`,
    `),$(Y.$$.fragment),zn=w(` or
    `),$(G.$$.fragment),Vn=w(")."),Et=l(),fe=u("p"),fe.innerHTML=_a,Ht=l(),pe=u("p"),pe.innerHTML=wa,St=l(),$(j.$$.fragment),Ot=l(),me=u("p"),me.textContent=va,Ut=l(),$(F.$$.fragment),Dt=l(),K=u("p"),Jn=w(`You can build this using your own preferred tools, or have a look at our
    `),$(X.$$.fragment),Zn=w("."),qt=l(),$($e.$$.fragment),Rt=l(),he=u("p"),he.innerHTML=ya,Nt=l(),$(de.$$.fragment),Wt=l(),ge=u("h3"),ge.textContent=ba,Yt=l(),ce=u("p"),ce.innerHTML=Ta,Gt=l(),_e=u("h3"),_e.textContent=xa,jt=l(),we=u("p"),we.innerHTML=Pa,Ft=l(),ve=u("p"),ve.innerHTML=Ia,Kt=l(),ye=u("p"),ye.textContent=Ca,Xt=l(),be=u("ul"),be.innerHTML=ka,Bt=l(),Te=u("p"),Te.textContent=La,zt=l(),B=u("ul"),ht=u("li"),ht.innerHTML=Ma,Qn=l(),C=u("li"),dt=u("b"),dt.textContent=Aa,ea=w(" - The "),gt=u("em"),gt.textContent=Ea,ta=w(` header will be required and
      verified by the dataspace. Once you save the data source with this setting you can manage
      which groups are allowed to access the data source. The members of the allowed groups will
      find the data source and instructions on generating valid API-tokens for this header in the
      `),ct=u("em"),ct.textContent=Ha,na=w(`
      section of dataspace. The `),$(z.$$.fragment),aa=w(` guide explains how you can verify the tokens in your data source and know which group was
      requesting the data.`),Vt=l(),xe=u("p"),xe.innerHTML=Sa,Jt=l(),$(Pe.$$.fragment),Zt=l(),Ie=u("p"),Ie.innerHTML=Oa,Qt=l(),$(Ce.$$.fragment),en=l(),ke=u("p"),ke.innerHTML=Ua,tn=l(),$(Le.$$.fragment),nn=l(),Me=u("p"),Me.innerHTML=Da,an=l(),L=u("p"),sa=w(`You likely also want to check the API token in your own data source, at least for any real
    integrations accessing any data that shouldn't be publicly accessible, by following the
    instructions in the
    `),$(V.$$.fragment),ia=w(" -guide. You can also use the name of the group, which is found in the "),_t=u("em"),_t.textContent=qa,oa=w(` field of
    the token, to restrict which group should have access to what data.`),sn=l(),M=u("p"),la=w(`To test your data source, you can either follow the more in-depth steps in the next
    `),$(J.$$.fragment),ra=w(` section or head to the
    `),$(Z.$$.fragment),ua=w(` section
    a bit further down for a simpler and quicker approach.`),on=l(),$(Ae.$$.fragment),ln=l(),Ee=u("p"),Ee.innerHTML=Ra,rn=l(),$(He.$$.fragment),un=l(),H=u("p"),fa=w(`As our data source uses Dataspace verified API tokens, we'll need one before making a request.
    You can generate one on the `),wt=u("em"),wt.textContent=Na,pa=w(` page.
    `),$(Se.$$.fragment),fn=l(),Oe=u("p"),Oe.innerHTML=Wa,pn=l(),$(Ue.$$.fragment),mn=l(),De=u("p"),De.innerHTML=Ya,$n=l(),$(qe.$$.fragment),hn=l(),Re=u("p"),Re.innerHTML=Ga,dn=l(),Ne=u("p"),Ne.innerHTML=ja,gn=l(),$(Q.$$.fragment),cn=l(),We=u("p"),We.textContent=Fa,_n=l(),$(ee.$$.fragment),wn=l(),Ye=u("p"),Ye.textContent=Ka,vn=l(),Ge=u("p"),Ge.textContent=Xa,yn=l(),$(je.$$.fragment),bn=l(),$(Fe.$$.fragment),Tn=l(),Ke=u("p"),Ke.textContent=Ba,xn=l(),Xe=u("p"),Xe.innerHTML=za,Pn=l(),$(Be.$$.fragment),In=l(),ze=u("p"),ze.innerHTML=Va,Cn=l(),Ve=u("p"),Ve.innerHTML=Ja,kn=l(),$(Je.$$.fragment),Ln=l(),Ze=u("p"),Ze.innerHTML=Za,Mn=l(),$(Qe.$$.fragment),An=l(),et=u("p"),et.innerHTML=Qa,En=l(),$(tt.$$.fragment),Hn=l(),nt=u("p"),nt.innerHTML=es,Sn=l(),$(at.$$.fragment),On=l(),st=u("p"),st.innerHTML=ts,Un=l(),$(it.$$.fragment),Dn=l(),ot=u("p"),ot.innerHTML=ns,qn=l(),$(lt.$$.fragment),Rn=l(),rt=u("p"),rt.innerHTML=as},l(e){h(o.$$.fragment,e),s=r(e),h(i.$$.fragment,e),b=r(e),h(P.$$.fragment,e),yt=r(e),D=f(e,"P",{});var t=U(D);Yn=v(t,`In this guide we will explain how to build a new data source so it can be queried through the
    product gateway using
    `),h(q.$$.fragment,t),Gn=v(t,`. These steps are the
    same on all IOXIO Dataspaces, while some might miss the particular data products mentioned here.`),t.forEach(n),bt=r(e),h(ne.$$.fragment,e),Tt=r(e),ae=f(e,"LI",{"data-svelte-h":!0}),m(ae)!=="svelte-13mw6ge"&&(ae.textContent=$a),xt=r(e),se=f(e,"LI",{"data-svelte-h":!0}),m(se)!=="svelte-v10dba"&&(se.textContent=ha),Pt=r(e),ie=f(e,"LI",{"data-svelte-h":!0}),m(ie)!=="svelte-yvgvsj"&&(ie.innerHTML=da),It=r(e),h(oe.$$.fragment,e),Ct=r(e),le=f(e,"P",{"data-svelte-h":!0}),m(le)!=="svelte-k7ejgw"&&(le.innerHTML=ga),kt=r(e),h(re.$$.fragment,e),Lt=r(e),R=f(e,"P",{});var ut=U(R);jn=v(ut,`If there is no definition for the type of data you want to provide, you can create your own
    definition by following the `),h(N.$$.fragment,ut),Fn=v(ut," guide."),ut.forEach(n),Mt=r(e),h(ue.$$.fragment,e),At=r(e),T=f(e,"P",{});var I=U(T);Kn=v(I,`We need to build an integration that provides an API matching one of the available definitions.
    We'll use `),$t=f(I,"EM",{"data-svelte-h":!0}),m($t)!=="svelte-429qah"&&($t.textContent=ca),Xn=v(I,` as our reference example (view
    `),h(W.$$.fragment,I),Bn=v(I,`,
    `),h(Y.$$.fragment,I),zn=v(I,` or
    `),h(G.$$.fragment,I),Vn=v(I,")."),I.forEach(n),Et=r(e),fe=f(e,"P",{"data-svelte-h":!0}),m(fe)!=="svelte-tut4fh"&&(fe.innerHTML=_a),Ht=r(e),pe=f(e,"P",{"data-svelte-h":!0}),m(pe)!=="svelte-1jsyogf"&&(pe.innerHTML=wa),St=r(e),h(j.$$.fragment,e),Ot=r(e),me=f(e,"P",{"data-svelte-h":!0}),m(me)!=="svelte-3bpf49"&&(me.textContent=va),Ut=r(e),h(F.$$.fragment,e),Dt=r(e),K=f(e,"P",{});var ft=U(K);Jn=v(ft,`You can build this using your own preferred tools, or have a look at our
    `),h(X.$$.fragment,ft),Zn=v(ft,"."),ft.forEach(n),qt=r(e),h($e.$$.fragment,e),Rt=r(e),he=f(e,"P",{"data-svelte-h":!0}),m(he)!=="svelte-wgxgjo"&&(he.innerHTML=ya),Nt=r(e),h(de.$$.fragment,e),Wt=r(e),ge=f(e,"H3",{"data-svelte-h":!0}),m(ge)!=="svelte-tuu3fh"&&(ge.textContent=ba),Yt=r(e),ce=f(e,"P",{"data-svelte-h":!0}),m(ce)!=="svelte-t9d209"&&(ce.innerHTML=Ta),Gt=r(e),_e=f(e,"H3",{"data-svelte-h":!0}),m(_e)!=="svelte-1drglyz"&&(_e.textContent=xa),jt=r(e),we=f(e,"P",{"data-svelte-h":!0}),m(we)!=="svelte-k6b4l4"&&(we.innerHTML=Pa),Ft=r(e),ve=f(e,"P",{"data-svelte-h":!0}),m(ve)!=="svelte-1nh3jbs"&&(ve.innerHTML=Ia),Kt=r(e),ye=f(e,"P",{"data-svelte-h":!0}),m(ye)!=="svelte-ixugg4"&&(ye.textContent=Ca),Xt=r(e),be=f(e,"UL",{"data-svelte-h":!0}),m(be)!=="svelte-7rbimd"&&(be.innerHTML=ka),Bt=r(e),Te=f(e,"P",{"data-svelte-h":!0}),m(Te)!=="svelte-19pc3ke"&&(Te.textContent=La),zt=r(e),B=f(e,"UL",{});var pt=U(B);ht=f(pt,"LI",{"data-svelte-h":!0}),m(ht)!=="svelte-81ikfc"&&(ht.innerHTML=Ma),Qn=r(pt),C=f(pt,"LI",{});var k=U(C);dt=f(k,"B",{"data-svelte-h":!0}),m(dt)!=="svelte-1k6arvo"&&(dt.textContent=Aa),ea=v(k," - The "),gt=f(k,"EM",{"data-svelte-h":!0}),m(gt)!=="svelte-bx5tdr"&&(gt.textContent=Ea),ta=v(k,` header will be required and
      verified by the dataspace. Once you save the data source with this setting you can manage
      which groups are allowed to access the data source. The members of the allowed groups will
      find the data source and instructions on generating valid API-tokens for this header in the
      `),ct=f(k,"EM",{"data-svelte-h":!0}),m(ct)!=="svelte-8vwiqp"&&(ct.textContent=Ha),na=v(k,`
      section of dataspace. The `),h(z.$$.fragment,k),aa=v(k,` guide explains how you can verify the tokens in your data source and know which group was
      requesting the data.`),k.forEach(n),pt.forEach(n),Vt=r(e),xe=f(e,"P",{"data-svelte-h":!0}),m(xe)!=="svelte-1ahjhn5"&&(xe.innerHTML=Sa),Jt=r(e),h(Pe.$$.fragment,e),Zt=r(e),Ie=f(e,"P",{"data-svelte-h":!0}),m(Ie)!=="svelte-mdnfoy"&&(Ie.innerHTML=Oa),Qt=r(e),h(Ce.$$.fragment,e),en=r(e),ke=f(e,"P",{"data-svelte-h":!0}),m(ke)!=="svelte-1989r9d"&&(ke.innerHTML=Ua),tn=r(e),h(Le.$$.fragment,e),nn=r(e),Me=f(e,"P",{"data-svelte-h":!0}),m(Me)!=="svelte-1smxlsb"&&(Me.innerHTML=Da),an=r(e),L=f(e,"P",{});var S=U(L);sa=v(S,`You likely also want to check the API token in your own data source, at least for any real
    integrations accessing any data that shouldn't be publicly accessible, by following the
    instructions in the
    `),h(V.$$.fragment,S),ia=v(S," -guide. You can also use the name of the group, which is found in the "),_t=f(S,"EM",{"data-svelte-h":!0}),m(_t)!=="svelte-w91li0"&&(_t.textContent=qa),oa=v(S,` field of
    the token, to restrict which group should have access to what data.`),S.forEach(n),sn=r(e),M=f(e,"P",{});var O=U(M);la=v(O,`To test your data source, you can either follow the more in-depth steps in the next
    `),h(J.$$.fragment,O),ra=v(O,` section or head to the
    `),h(Z.$$.fragment,O),ua=v(O,` section
    a bit further down for a simpler and quicker approach.`),O.forEach(n),on=r(e),h(Ae.$$.fragment,e),ln=r(e),Ee=f(e,"P",{"data-svelte-h":!0}),m(Ee)!=="svelte-144s6i3"&&(Ee.innerHTML=Ra),rn=r(e),h(He.$$.fragment,e),un=r(e),H=f(e,"P",{});var te=U(H);fa=v(te,`As our data source uses Dataspace verified API tokens, we'll need one before making a request.
    You can generate one on the `),wt=f(te,"EM",{"data-svelte-h":!0}),m(wt)!=="svelte-8vwiqp"&&(wt.textContent=Na),pa=v(te,` page.
    `),h(Se.$$.fragment,te),te.forEach(n),fn=r(e),Oe=f(e,"P",{"data-svelte-h":!0}),m(Oe)!=="svelte-fhvupt"&&(Oe.innerHTML=Wa),pn=r(e),h(Ue.$$.fragment,e),mn=r(e),De=f(e,"P",{"data-svelte-h":!0}),m(De)!=="svelte-qzu0p6"&&(De.innerHTML=Ya),$n=r(e),h(qe.$$.fragment,e),hn=r(e),Re=f(e,"P",{"data-svelte-h":!0}),m(Re)!=="svelte-1l8j8pn"&&(Re.innerHTML=Ga),dn=r(e),Ne=f(e,"P",{"data-svelte-h":!0}),m(Ne)!=="svelte-jlcxxq"&&(Ne.innerHTML=ja),gn=r(e),h(Q.$$.fragment,e),cn=r(e),We=f(e,"P",{"data-svelte-h":!0}),m(We)!=="svelte-17pos06"&&(We.textContent=Fa),_n=r(e),h(ee.$$.fragment,e),wn=r(e),Ye=f(e,"P",{"data-svelte-h":!0}),m(Ye)!=="svelte-17mznak"&&(Ye.textContent=Ka),vn=r(e),Ge=f(e,"P",{"data-svelte-h":!0}),m(Ge)!=="svelte-12pvu5s"&&(Ge.textContent=Xa),yn=r(e),h(je.$$.fragment,e),bn=r(e),h(Fe.$$.fragment,e),Tn=r(e),Ke=f(e,"P",{"data-svelte-h":!0}),m(Ke)!=="svelte-1pioll7"&&(Ke.textContent=Ba),xn=r(e),Xe=f(e,"P",{"data-svelte-h":!0}),m(Xe)!=="svelte-1g21g4u"&&(Xe.innerHTML=za),Pn=r(e),h(Be.$$.fragment,e),In=r(e),ze=f(e,"P",{"data-svelte-h":!0}),m(ze)!=="svelte-mox1nb"&&(ze.innerHTML=Va),Cn=r(e),Ve=f(e,"P",{"data-svelte-h":!0}),m(Ve)!=="svelte-12xmk3c"&&(Ve.innerHTML=Ja),kn=r(e),h(Je.$$.fragment,e),Ln=r(e),Ze=f(e,"P",{"data-svelte-h":!0}),m(Ze)!=="svelte-6tqs62"&&(Ze.innerHTML=Za),Mn=r(e),h(Qe.$$.fragment,e),An=r(e),et=f(e,"P",{"data-svelte-h":!0}),m(et)!=="svelte-3wd1a"&&(et.innerHTML=Qa),En=r(e),h(tt.$$.fragment,e),Hn=r(e),nt=f(e,"P",{"data-svelte-h":!0}),m(nt)!=="svelte-trz0vx"&&(nt.innerHTML=es),Sn=r(e),h(at.$$.fragment,e),On=r(e),st=f(e,"P",{"data-svelte-h":!0}),m(st)!=="svelte-1jbjwxw"&&(st.innerHTML=ts),Un=r(e),h(it.$$.fragment,e),Dn=r(e),ot=f(e,"P",{"data-svelte-h":!0}),m(ot)!=="svelte-ffkvtt"&&(ot.innerHTML=ns),qn=r(e),h(lt.$$.fragment,e),Rn=r(e),rt=f(e,"P",{"data-svelte-h":!0}),m(rt)!=="svelte-2qrklv"&&(rt.innerHTML=as)},m(e,t){d(o,e,t),a(e,s,t),d(i,e,t),a(e,b,t),d(P,e,t),a(e,yt,t),a(e,D,t),y(D,Yn),d(q,D,null),y(D,Gn),a(e,bt,t),d(ne,e,t),a(e,Tt,t),a(e,ae,t),a(e,xt,t),a(e,se,t),a(e,Pt,t),a(e,ie,t),a(e,It,t),d(oe,e,t),a(e,Ct,t),a(e,le,t),a(e,kt,t),d(re,e,t),a(e,Lt,t),a(e,R,t),y(R,jn),d(N,R,null),y(R,Fn),a(e,Mt,t),d(ue,e,t),a(e,At,t),a(e,T,t),y(T,Kn),y(T,$t),y(T,Xn),d(W,T,null),y(T,Bn),d(Y,T,null),y(T,zn),d(G,T,null),y(T,Vn),a(e,Et,t),a(e,fe,t),a(e,Ht,t),a(e,pe,t),a(e,St,t),d(j,e,t),a(e,Ot,t),a(e,me,t),a(e,Ut,t),d(F,e,t),a(e,Dt,t),a(e,K,t),y(K,Jn),d(X,K,null),y(K,Zn),a(e,qt,t),d($e,e,t),a(e,Rt,t),a(e,he,t),a(e,Nt,t),d(de,e,t),a(e,Wt,t),a(e,ge,t),a(e,Yt,t),a(e,ce,t),a(e,Gt,t),a(e,_e,t),a(e,jt,t),a(e,we,t),a(e,Ft,t),a(e,ve,t),a(e,Kt,t),a(e,ye,t),a(e,Xt,t),a(e,be,t),a(e,Bt,t),a(e,Te,t),a(e,zt,t),a(e,B,t),y(B,ht),y(B,Qn),y(B,C),y(C,dt),y(C,ea),y(C,gt),y(C,ta),y(C,ct),y(C,na),d(z,C,null),y(C,aa),a(e,Vt,t),a(e,xe,t),a(e,Jt,t),d(Pe,e,t),a(e,Zt,t),a(e,Ie,t),a(e,Qt,t),d(Ce,e,t),a(e,en,t),a(e,ke,t),a(e,tn,t),d(Le,e,t),a(e,nn,t),a(e,Me,t),a(e,an,t),a(e,L,t),y(L,sa),d(V,L,null),y(L,ia),y(L,_t),y(L,oa),a(e,sn,t),a(e,M,t),y(M,la),d(J,M,null),y(M,ra),d(Z,M,null),y(M,ua),a(e,on,t),d(Ae,e,t),a(e,ln,t),a(e,Ee,t),a(e,rn,t),d(He,e,t),a(e,un,t),a(e,H,t),y(H,fa),y(H,wt),y(H,pa),d(Se,H,null),a(e,fn,t),a(e,Oe,t),a(e,pn,t),d(Ue,e,t),a(e,mn,t),a(e,De,t),a(e,$n,t),d(qe,e,t),a(e,hn,t),a(e,Re,t),a(e,dn,t),a(e,Ne,t),a(e,gn,t),d(Q,e,t),a(e,cn,t),a(e,We,t),a(e,_n,t),d(ee,e,t),a(e,wn,t),a(e,Ye,t),a(e,vn,t),a(e,Ge,t),a(e,yn,t),d(je,e,t),a(e,bn,t),d(Fe,e,t),a(e,Tn,t),a(e,Ke,t),a(e,xn,t),a(e,Xe,t),a(e,Pn,t),d(Be,e,t),a(e,In,t),a(e,ze,t),a(e,Cn,t),a(e,Ve,t),a(e,kn,t),d(Je,e,t),a(e,Ln,t),a(e,Ze,t),a(e,Mn,t),d(Qe,e,t),a(e,An,t),a(e,et,t),a(e,En,t),d(tt,e,t),a(e,Hn,t),a(e,nt,t),a(e,Sn,t),d(at,e,t),a(e,On,t),a(e,st,t),a(e,Un,t),d(it,e,t),a(e,Dn,t),a(e,ot,t),a(e,qn,t),d(lt,e,t),a(e,Rn,t),a(e,rt,t),Nn=!0},p(e,t){const ut={};t&1&&(ut.title=e[0].guide.title),o.$set(ut);const I={};t&1&&(I.path=e[0].path),i.$set(I);const ft={};t&4&&(ft.$$scope={dirty:t,ctx:e}),q.$set(ft);const pt={};t&4&&(pt.$$scope={dirty:t,ctx:e}),N.$set(pt);const k={};t&4&&(k.$$scope={dirty:t,ctx:e}),W.$set(k);const S={};t&4&&(S.$$scope={dirty:t,ctx:e}),Y.$set(S);const O={};t&4&&(O.$$scope={dirty:t,ctx:e}),G.$set(O);const te={};t&4&&(te.$$scope={dirty:t,ctx:e}),j.$set(te);const ss={};t&4&&(ss.$$scope={dirty:t,ctx:e}),F.$set(ss);const is={};t&4&&(is.$$scope={dirty:t,ctx:e}),X.$set(is);const os={};t&4&&(os.$$scope={dirty:t,ctx:e}),z.$set(os);const ls={};t&4&&(ls.$$scope={dirty:t,ctx:e}),V.$set(ls);const rs={};t&4&&(rs.$$scope={dirty:t,ctx:e}),J.$set(rs);const us={};t&4&&(us.$$scope={dirty:t,ctx:e}),Z.$set(us);const fs={};t&4&&(fs.$$scope={dirty:t,ctx:e}),Q.$set(fs);const ps={};t&4&&(ps.$$scope={dirty:t,ctx:e}),ee.$set(ps)},i(e){Nn||(g(o.$$.fragment,e),g(i.$$.fragment,e),g(P.$$.fragment,e),g(q.$$.fragment,e),g(ne.$$.fragment,e),g(oe.$$.fragment,e),g(re.$$.fragment,e),g(N.$$.fragment,e),g(ue.$$.fragment,e),g(W.$$.fragment,e),g(Y.$$.fragment,e),g(G.$$.fragment,e),g(j.$$.fragment,e),g(F.$$.fragment,e),g(X.$$.fragment,e),g($e.$$.fragment,e),g(de.$$.fragment,e),g(z.$$.fragment,e),g(Pe.$$.fragment,e),g(Ce.$$.fragment,e),g(Le.$$.fragment,e),g(V.$$.fragment,e),g(J.$$.fragment,e),g(Z.$$.fragment,e),g(Ae.$$.fragment,e),g(He.$$.fragment,e),g(Se.$$.fragment,e),g(Ue.$$.fragment,e),g(qe.$$.fragment,e),g(Q.$$.fragment,e),g(ee.$$.fragment,e),g(je.$$.fragment,e),g(Fe.$$.fragment,e),g(Be.$$.fragment,e),g(Je.$$.fragment,e),g(Qe.$$.fragment,e),g(tt.$$.fragment,e),g(at.$$.fragment,e),g(it.$$.fragment,e),g(lt.$$.fragment,e),Nn=!0)},o(e){c(o.$$.fragment,e),c(i.$$.fragment,e),c(P.$$.fragment,e),c(q.$$.fragment,e),c(ne.$$.fragment,e),c(oe.$$.fragment,e),c(re.$$.fragment,e),c(N.$$.fragment,e),c(ue.$$.fragment,e),c(W.$$.fragment,e),c(Y.$$.fragment,e),c(G.$$.fragment,e),c(j.$$.fragment,e),c(F.$$.fragment,e),c(X.$$.fragment,e),c($e.$$.fragment,e),c(de.$$.fragment,e),c(z.$$.fragment,e),c(Pe.$$.fragment,e),c(Ce.$$.fragment,e),c(Le.$$.fragment,e),c(V.$$.fragment,e),c(J.$$.fragment,e),c(Z.$$.fragment,e),c(Ae.$$.fragment,e),c(He.$$.fragment,e),c(Se.$$.fragment,e),c(Ue.$$.fragment,e),c(qe.$$.fragment,e),c(Q.$$.fragment,e),c(ee.$$.fragment,e),c(je.$$.fragment,e),c(Fe.$$.fragment,e),c(Be.$$.fragment,e),c(Je.$$.fragment,e),c(Qe.$$.fragment,e),c(tt.$$.fragment,e),c(at.$$.fragment,e),c(it.$$.fragment,e),c(lt.$$.fragment,e),Nn=!1},d(e){e&&(n(s),n(b),n(yt),n(D),n(bt),n(Tt),n(ae),n(xt),n(se),n(Pt),n(ie),n(It),n(Ct),n(le),n(kt),n(Lt),n(R),n(Mt),n(At),n(T),n(Et),n(fe),n(Ht),n(pe),n(St),n(Ot),n(me),n(Ut),n(Dt),n(K),n(qt),n(Rt),n(he),n(Nt),n(Wt),n(ge),n(Yt),n(ce),n(Gt),n(_e),n(jt),n(we),n(Ft),n(ve),n(Kt),n(ye),n(Xt),n(be),n(Bt),n(Te),n(zt),n(B),n(Vt),n(xe),n(Jt),n(Zt),n(Ie),n(Qt),n(en),n(ke),n(tn),n(nn),n(Me),n(an),n(L),n(sn),n(M),n(on),n(ln),n(Ee),n(rn),n(un),n(H),n(fn),n(Oe),n(pn),n(mn),n(De),n($n),n(hn),n(Re),n(dn),n(Ne),n(gn),n(cn),n(We),n(_n),n(wn),n(Ye),n(vn),n(Ge),n(yn),n(bn),n(Tn),n(Ke),n(xn),n(Xe),n(Pn),n(In),n(ze),n(Cn),n(Ve),n(kn),n(Ln),n(Ze),n(Mn),n(An),n(et),n(En),n(Hn),n(nt),n(Sn),n(On),n(st),n(Un),n(Dn),n(ot),n(qn),n(Rn),n(rt)),_(o,e),_(i,e),_(P,e),_(q),_(ne,e),_(oe,e),_(re,e),_(N),_(ue,e),_(W),_(Y),_(G),_(j,e),_(F,e),_(X),_($e,e),_(de,e),_(z),_(Pe,e),_(Ce,e),_(Le,e),_(V),_(J),_(Z),_(Ae,e),_(He,e),_(Se),_(Ue,e),_(qe,e),_(Q,e),_(ee,e),_(je,e),_(Fe,e),_(Be,e),_(Je,e),_(Qe,e),_(tt,e),_(at,e),_(it,e),_(lt,e)}}}function Ss(p){let o,s;return o=new ds({props:{$$slots:{default:[Hs]},$$scope:{ctx:p}}}),{c(){$(o.$$.fragment)},l(i){h(o.$$.fragment,i)},m(i,b){d(o,i,b),s=!0},p(i,[b]){const P={};b&5&&(P.$$scope={dirty:b,ctx:i}),o.$set(P)},i(i){s||(g(o.$$.fragment,i),s=!0)},o(i){c(o.$$.fragment,i),s=!1},d(i){_(o,i)}}}function Os(p,o,s){let{data:i}=o;const b=i.images;return p.$$set=P=>{"data"in P&&s(0,i=P.data)},[i,b]}class Ks extends $s{constructor(o){super(),hs(this,o,Os,Ss,ms,{data:0})}}export{Ks as component};
