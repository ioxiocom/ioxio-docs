import{s as _s,a as u,f as $,l,c as h,g as p,z as y,h as P,m as r,d as s,i,y as m,B as q}from"../chunks/scheduler.2e48bd10.js";import{S as ws,i as vs,b as c,d,m as g,a as _,t as w,e as v}from"../chunks/index.ed958696.js";import{T as ys,S as D}from"../chunks/TableOfContents.c7a57465.js";import{C as st}from"../chunks/Code.23820852.js";import{j as vt}from"../chunks/json.4d993fc0.js";import{T as ks,B as bs}from"../chunks/Title.0bdb2a75.js";import{G as xs}from"../chunks/GuideImage.920a4a56.js";import{A as b}from"../chunks/A.2ad5f04f.js";import{b as Cs}from"../chunks/bash.7e4226ac.js";import{G as xe}from"../chunks/urls.6350a949.js";function Ts(f){let o;return{c(){o=l("consent token")},l(n){o=r(n,"consent token")},m(n,a){i(n,o,a)},d(n){n&&s(o)}}}function Is(f){let o;return{c(){o=l("JSON Web Token (JWT)")},l(n){o=r(n,"JSON Web Token (JWT)")},m(n,a){i(n,o,a)},d(n){n&&s(o)}}}function Ls(f){let o;return{c(){o=l("Using Consent")},l(n){o=r(n,"Using Consent")},m(n,a){i(n,o,a)},d(n){n&&s(o)}}}function Ws(f){let o=xe.BUILD_APP.title+"",n;return{c(){n=l(o)},l(a){n=r(a,o)},m(a,k){i(a,n,k)},p:q,d(a){a&&s(n)}}}function js(f){let o;return{c(){o=l("consent token")},l(n){o=r(n,"consent token")},m(n,a){i(n,o,a)},d(n){n&&s(o)}}}function Js(f){let o;return{c(){o=l("JSON Web Token (JWT)")},l(n){o=r(n,"JSON Web Token (JWT)")},m(n,a){i(n,o,a)},d(n){n&&s(o)}}}function Ms(f){let o;return{c(){o=l("JSON Web Token Introduction")},l(n){o=r(n,"JSON Web Token Introduction")},m(n,a){i(n,o,a)},d(n){n&&s(o)}}}function Ps(f){let o;return{c(){o=l("jwt.io")},l(n){o=r(n,"jwt.io")},m(n,a){i(n,o,a)},d(n){n&&s(o)}}}function Ns(f){let o;return{c(){o=l("JWT libraries")},l(n){o=r(n,"JWT libraries")},m(n,a){i(n,o,a)},d(n){n&&s(o)}}}function Es(f){let o;return{c(){o=l("RFC 7519")},l(n){o=r(n,"RFC 7519")},m(n,a){i(n,o,a)},d(n){n&&s(o)}}}function Ss(f){let o=`
eyJhbGciOiJSUzI1NiIsImprdSI6Imh0dHBzOi8vY29uc2VudC5zYW5kYm94LmlveGlvLWRhdGFzcGFjZS5jb20vLndlbGwta25vd24vandrcy5qc29uIiwia2lkIjoiZTE4Nzg1YTdlMTBlMWJkOGI4M2YzN2JkNGJlMmMwZTciLCJ0aWQiOiIxNjQwOGI2Yy0wNjdjLTQ1OWQtYWZlYi1lNWQ3NTI4MTE1Y2UiLCJ0eXAiOiJKV1QiLCJ2IjoiMC4yIn0.eyJzdWIiOiJaR1Z0YjBCMFpYTjBaWEl1YVc5NGFXOHVZMjl0IiwiaXNzIjoiaHR0cHM6Ly9jb25zZW50LnNhbmRib3guaW94aW8tZGF0YXNwYWNlLmNvbSIsImlhdCI6MTcwNDcxMDE3MSwiZXhwIjoxNzA0NzEzNzcxLCJkc2kiOiJkcHA6Ly9pb3hpb0BzYW5kYm94LmlveGlvLWRhdGFzcGFjZS5jb20vTlNHL0FnZW50L0xlZ2FsRW50aXR5L05vbkxpc3RlZENvbXBhbnkvU2lnbmF0b3J5UmlnaHRzX3YxLjAiLCJhcHAiOiI4M2Q1NTEyNi1lNjE3LTQzZGMtYTJmZi00M2ZiZWI4NDhjZDEiLCJhcHBpc3MiOiJodHRwczovL2xvZ2luLnNhbmRib3guaW94aW8tZGF0YXNwYWNlLmNvbSIsInN1YmlzcyI6Imh0dHBzOi8vbG9naW4uc2FuZGJveC5pb3hpby1kYXRhc3BhY2UuY29tIiwiYWNyIjoiZmFrZS1hdXRoIn0.FhYxFiOt4pZFvJpoiXwr6Crt7Nko7OBIh_b8tyIX6YodHoZHsBIXug5WG5J1OEakTMZcaFgINswL98tNm-E7VELQa722x3KW8xI2VpFf05Zd2s4vwByzpWztj_J0eUviL8Xowu8kmzkbF44IzH1J4FGP6ZwAGRzD6hnIzlObeieefba4aJLkcmQL9cguHDV6A07R4IuOgQTdIUGjYIkmPYuV1s81KpsJ4SQkXzeFQBHWvB50Fi1-GZe0B5CZuX0TSa7jshm12C8bMM1AA52cjdVyZMhx9vyYSpBeQ6BcBG41kBapNtwW5svDlzk_-EmPoWB57f_B-Py9Nhipb3FL6b3ElBLxs1tWyaWW2bMBBdlbGmWabW8w6KlL336RSzix-JdikmywJH3xkzNBQiqs9Uk-5om7RrCKiOkd4Em7NFh7s418aRd8g7n4G6FkXzrWn3jcPCQDTIUrTYRv4uUyJ4NHT6qvfogh21Et_q3E9VfVKFlQ8bZn3Fl7N2HtQ8C3RImkjDq21k0Kz5wBqA6eZDq9HqGejhYE_TyST_EAlExw43VPjAYw0elE_i6OrphzdPE63BtF1ieSbP-O-RcN2PuNiHyGjeFh5PWYOOmyhn7goVrC42j1DEjd0jYTVRmqXKWthZOC3BLQ5zkKJsX1psLeiGUIf6YztP4mcpDitMY

`,n;return{c(){n=l(o)},l(a){n=r(a,o)},m(a,k){i(a,n,k)},p:q,d(a){a&&s(n)}}}function Os(f){let o;return{c(){o=l("Using Consent")},l(n){o=r(n,"Using Consent")},m(n,a){i(n,o,a)},d(n){n&&s(o)}}}function Hs(f){let o=xe.BUILD_APP.title+"",n;return{c(){n=l(o)},l(a){n=r(a,o)},m(a,k){i(a,n,k)},p:q,d(a){a&&s(n)}}}function zs(f){let o;return{c(){o=l("board page of one of the companies in the MyCompany Demo App")},l(n){o=r(n,"board page of one of the companies in the MyCompany Demo App")},m(n,a){i(n,o,a)},d(n){n&&s(o)}}}function As(f){let o;return{c(){o=l("consent configuration")},l(n){o=r(n,"consent configuration")},m(n,a){i(n,o,a)},d(n){n&&s(o)}}}function Ys(f){let o;return{c(){o=l("https://consent.sandbox.ioxio-dataspace.com/.well-known/dataspace/consent-configuration.json")},l(n){o=r(n,"https://consent.sandbox.ioxio-dataspace.com/.well-known/dataspace/consent-configuration.json")},m(n,a){i(n,o,a)},d(n){n&&s(o)}}}function qs(f){let o=`
{
  "issuer": "https://consent.sandbox.ioxio-dataspace.com",
  "jwks_uri": "https://consent.sandbox.ioxio-dataspace.com/.well-known/jwks.json",
  "consent_request_uri": "https://consent.sandbox.ioxio-dataspace.com/Consent/RequestConsents"
}
  `,n;return{c(){n=l(o)},l(a){n=r(a,o)},m(a,k){i(a,n,k)},p:q,d(a){a&&s(n)}}}function Bs(f){let o;return{c(){o=l("jwt.io")},l(n){o=r(n,"jwt.io")},m(n,a){i(n,o,a)},d(n){n&&s(o)}}}function Fs(f){let o;return{c(){o=l("https://consent.sandbox.ioxio-dataspace.com/.well-known/jwks.json")},l(n){o=r(n,"https://consent.sandbox.ioxio-dataspace.com/.well-known/jwks.json")},m(n,a){i(n,o,a)},d(n){n&&s(o)}}}function Gs(f){let o=`
{
  "keys": [
    {
      "kid": "e18785a7e10e1bd8b83f37bd4be2c0e7",
      "kty": "RSA",
      "use": "sig",
      "alg": "RS256",
      "n": "0FqQHSRgUzu9WwyUnl4FiXADIDptF82eUn1IeOFWt-ZHVzzddsZjT_F7YOZsgVyF9QRc1ROqqnvEs7J90fBQG8nMAml1R56lZdruqqyQ8kAQjqplhi4CAU6NZrzBWybCkZVq6PSvgtHJWSMCcU-09g24Q3GLWvW-gqAh4sZMjf1l45MASjgaYYozaZv1HgeG-dmFOsngafNQue8DGt97UxdqtP3rsjqdKaXR9iPIxcgJNhAQrqTorCiKp_CXUatsHgFD6ANxfgu6iSmBPbgmGi6AhPuAalWTi5BcSWEgawnq_kYopnHH7ymgVjV-6eNmdpyHZ-qaK2k-YB1ydvbdZfbmjl-ybN7YZ5QlXuOnLNHE4eqA1Z5yk0M4eL8smDpH4Mh6dataXxZxp5QkBV9iS7WPHLvWwiOQrOjL0REQ0bSz5d6nfQdjp0wVWQZH0GPQUOwVfqXcMODZAdG1X8d6VhgjG3oTYgDyovCWoG1CJEokLMXrSa-o0Hw_TVgYFbPhwDsxl7KvJDD6cid1sWiYY67isuWWHG7q_QLoG1gTVXIE5ycVzSqVED_bOzxKmorrj4G-XoDyx36mK1O5ROVktJ6dZ7nLJGsWRTzPjXWXMG639snzIClG9momA1fpc6f2vyQsjY-9Gel2toxeQite0hTmUn9-vfWi3mnqFlr-ZaU",
      "e": "AQAB"
    }
  ]
}
  `,n;return{c(){n=l(o)},l(a){n=r(a,o)},m(a,k){i(a,n,k)},p:q,d(a){a&&s(n)}}}function Zs(f){let o;return{c(){o=l("RFC 7517: JSON Web Key (JWK)")},l(n){o=r(n,"RFC 7517: JSON Web Key (JWK)")},m(n,a){i(n,o,a)},d(n){n&&s(o)}}}function Rs(f){let o;return{c(){o=l("PyJWT")},l(n){o=r(n,"PyJWT")},m(n,a){i(n,o,a)},d(n){n&&s(o)}}}function Ds(f){let o;return{c(){o=l("retrieving the keys from a JWKS endpoint")},l(n){o=r(n,"retrieving the keys from a JWKS endpoint")},m(n,a){i(n,o,a)},d(n){n&&s(o)}}}function Us(f){let o=xe.VERIFY_ID_TOKEN.title+"",n;return{c(){n=l(o)},l(a){n=r(a,o)},m(a,k){i(a,n,k)},p:q,d(a){a&&s(n)}}}function Xs(f){let o='{"dataSource": "dpp://{source}@{dataspace-domain}/{definition}"}',n;return{c(){n=l(o)},l(a){n=r(a,o)},m(a,k){i(a,n,k)},p:q,d(a){a&&s(n)}}}function Qs(f){let o=`
curl --request POST \\
  --url 'https://consent.sandbox.ioxio-dataspace.com/Consent/Verify' \\
  --header 'Content-Type: application/json' \\
  --header 'Authorization: Bearer eyJ...' \\
  --header 'X-Consent-Token: eyJ...' \\
  --data '{
            "dataSource": "dpp://ioxio@sandbox.ioxio-dataspace.com/NSG/Agent/LegalEntity/NonListedCompany/SignatoryRights_v1.0"
          }'
  `,n;return{c(){n=l(o)},l(a){n=r(a,o)},m(a,k){i(a,n,k)},p:q,d(a){a&&s(n)}}}function Vs(f){let o=`
{"verified": true}
  `,n;return{c(){n=l(o)},l(a){n=r(a,o)},m(a,k){i(a,n,k)},p:q,d(a){a&&s(n)}}}function Ks(f){let o=`
{"verified": false}
  `,n;return{c(){n=l(o)},l(a){n=r(a,o)},m(a,k){i(a,n,k)},p:q,d(a){a&&s(n)}}}function ea(f){let o,n,a,k,j,yt,Ce,po=`An application registered on the dataspace can request consents from a user to access the data
    from data sources which require user consent. If the user grants the consent the application can
    request a consent token and include it in the <em>X-Consent-Token</em> header when making the request
    to the product gateway. The product gateway will forward the header to the productizer. This guide
    explains how the productizer should verify the token if it wants to ensure the user has given their
    consent.`,kt,S,vn,U,yn,X,kn,bt,O,bn,Q,xn,V,Cn,xt,Te,Ct,Ie,co="Get the X-Consent-Token header",Tt,Le,go=`The productizer or data source needs to first extract the consent token from the
    <em>X-Consent-Token</em> HTTP header of the request. Please note that the header is in many data
    source definitions optional, so take that into account.`,It,We,_o="Reading the consent token",Lt,H,Tn,K,In,ee,Ln,Wt,J,Wn,te,jn,ne,Jn,oe,Mn,jt,se,Pn,ae,Nn,Jt,je,wo=`Let's have a look at a valid example token from one of the applications on the IOXIO Sandbox
    Dataspace and how to verify it.`,Mt,Je,vo="Let's examine this token:",Pt,ie,Nt,M,En,le,Sn,re,On,fe,Hn,Et,Me,yo="This is what the content of the above token looks like:",St,Pe,Ot,Ne,ko=`Many JWT libraries also allow you to read the JWT without verifying it. In case your library for
    some reason does not do that, you can actually note that the token consists of three sections
    separated by a dot, like <em>AAA.BBB.CCC</em>. The first section (<em>AAA</em>) is the header,
    the second one (<em>BBB</em>) the body and the last one (<em>CCC</em>) the signature. The first
    two are actually just Base64 encoded JSON strings that can be easily decoded and read, without
    verifying the signature.`,Ht,Ee,zt,Se,bo=`The first step to find the key is to check the issuer of the token, which is found in the
    <em>iss</em> field in the body.`,At,Oe,xo=`Please note that you should check that the <em>iss</em> is one you want to trust. In a typical IOXIO
    dataspace this would always be the address of the consent provider of the dataspace.`,Yt,x,zn,at,Co="iss",An,it,To="https://consent.sandbox.ioxio-dataspace.com",Yn,me,qn,lt,Io="/.well-known/dataspace/consent-configuration.json",Bn,rt,Lo="iss",Fn,ue,Gn,qt,he,Bt,He,Wo="The <em>jwks_uri</em> specify where we can find the keys of this consent provider.",Ft,z,Zn,ft,jo="jku",Rn,$e,Dn,Gt,ze,Jo=`Please note that you should validate the <em>iss</em> or <em>jku</em> match what you expect to find
    on the dataspace you are working on before fetching keys to ensure they are indeed keys that should
    be trusted on the particular dataspace.`,Zt,Ae,Rt,A,Un,mt,Mo="jwks_uri",Xn,pe,Qn,Dt,ce,Ut,L,Vn,ut,Po="kid",Kn,ht,No="alg",eo,$t,Eo="use",to,pt,So="sig",no,de,oo,Xt,Y,so,ge,ao,_e,io,Qt,Ye,Vt,qe,Oo=`Please note that for performance reasons you should use some level of caching. The address of
    the <em>jwks_uri</em> is for example not likely to change in practice. The keys are neither rotated
    frequently, so they could be cached for some time, but it&#39;s still important they get refreshed once
    in a while.`,Kt,Be,en,Fe,Ho=`Once you've found the matching key (unless your library does that for you), you will need to
    consult the documentation of your particular JWT library on how to use it to verify the token.
    This varies a bit by library. In some case you might even need to convert the key to some other
    format accepted by the library. Covering all these possibilities is however not possible in this
    guide, but that information can hopefully be found from other sources using the most popular
    search engines.`,tn,Ge,nn,Ze,zo=`After verifying the signature, you should do some basic verification of some of the typical
    fields. Many libraries by default verify the <em>iat</em> (Issued At) and <em>exp</em>
    (Expiration Time), but some do not automatically do it. In that case you should verify that
    <em>iat</em>
    &lt;= current time &lt;= <em>exp</em>. You might also want to check the <em>iss</em>
    (Issuer) matches what you expect (the consent provider of the dataspace), but this would be good
    to check already before fetching the keys.`,on,Re,Ao=`Also verify the <em>dsi</em> field. It contains a Data Product Protocol link of the form
    <em>dpp://&lt;source&gt;@&lt;dataspace-domain&gt;/&lt;definition&gt;</em>, which means you will
    have to parse it and check it against the data source you are implementing. For example
    <em>dpp://ioxio@sandbox.ioxio-dataspace.com/NSG/Agent/LegalEntity/NonListedCompany/SignatoryRights_v1.0</em>
    would match a data source with the group <em>ioxio</em> for the
    <em>NSG/Agent/LegalEntity/NonListedCompany/SignatoryRights_v1.0</em>
    definition on the <em>sandbox.ioxio-dataspace.com</em> dataspace. Ensure all of these match with
    the data source you want to provide.`,sn,De,Yo=`You should verify the
    <em>sub</em> (the subject from the id_token that granted the consent) and <em>subiss</em> (the
    issuer of the id_token that was used to give the consent, typically the login portal) as well as
    the <em>acr</em> (authentication context class reference), to ensure which user actually gave the
    consent.`,an,C,lo,we,ro,ct,qo="sub",fo,dt,Bo="app",mo,gt,Fo="aud",uo,_t,Go="subiss",ho,wt,Zo="iss",$o,ln,Ue,rn,Xe,Ro=`Once you&#39;ve done all the verifications you know which user (<em>sub</em>+<em>subiss</em>+
    <em>acr</em>) gave the consent to request the data through which application (<em>app</em>+
    <em>appiss</em>) and to which data source (<em>dsi</em>). Verify these match with what you want
    to provide and what the user has permission to request and return the requested data.`,fn,Qe,mn,Ve,Do=`The consent portal also provides an API endpoint for verifying the consent token if you don&#39;t
    want to fetch the keys yourself. The endpoint is located at the path
    <em>/Consent/Verify</em> of the consent portal, so for example on the sandbox dataspace the URL
    is <em>https://consent.sandbox.ioxio-dataspace.com/Consent/Verify</em>. It&#39;s expecting a
    <em>POST</em>
    request with the <em>Authorization: Bearer &lt;token&gt;</em> and the
    <em>X-Consent-Token &lt;consent token&gt;</em>
    headers. The body is expected to be in JSON format (<em>Content-Type: application/json</em>) and
    contain a body of the form:`,un,ve,hn,Ke,Uo=`Make sure you replace the source with the name of your own data source (group + optional variant
    separated by a colon), specify the dataspace domain and the definition your datasource is using.
    Here is what the request would look like as a cURL command with the respective tokens shortened
    down for readability:`,$n,ye,pn,et,Xo=`You will get back a response indicating if the tokens passed the verification or not, in case of
    a success:`,cn,ke,dn,tt,Qo="And in case of failure:",gn,be,_n,nt,Vo=`If you want to know who the user is (in case the data you return is depending on the user, which
    is quite common) you will need to decode the consent token to extract the user details (
    <em>sub+subiss+acr</em>) from it. But since the tokens have already been verified you can decode
    them without any verification.`,wn;return o=new ks({props:{title:f[0].guide.title}}),a=new bs({props:{path:f[0].path}}),j=new D({props:{title:"Introduction"}}),U=new b({props:{href:"/schemas/consent-token/",$$slots:{default:[Ts]},$$scope:{ctx:f}}}),X=new b({props:{href:"https://datatracker.ietf.org/doc/html/rfc7519",$$slots:{default:[Is]},$$scope:{ctx:f}}}),Q=new b({props:{href:xe.BUILD_APP.href+"#using-consent",$$slots:{default:[Ls]},$$scope:{ctx:f}}}),V=new b({props:{href:xe.BUILD_APP.href,$$slots:{default:[Ws]},$$scope:{ctx:f}}}),Te=new D({props:{title:"Verifying the consent token in the productizer"}}),K=new b({props:{href:"/schemas/consent-token/",$$slots:{default:[js]},$$scope:{ctx:f}}}),ee=new b({props:{href:"https://datatracker.ietf.org/doc/html/rfc7519",$$slots:{default:[Js]},$$scope:{ctx:f}}}),te=new b({props:{href:"https://jwt.io/introduction",$$slots:{default:[Ms]},$$scope:{ctx:f}}}),ne=new b({props:{href:"https://jwt.io",$$slots:{default:[Ps]},$$scope:{ctx:f}}}),oe=new b({props:{href:"https://jwt.io/libraries",$$slots:{default:[Ns]},$$scope:{ctx:f}}}),ae=new b({props:{href:"https://datatracker.ietf.org/doc/html/rfc7519",$$slots:{default:[Es]},$$scope:{ctx:f}}}),ie=new st({props:{lang:vt,$$slots:{default:[Ss]},$$scope:{ctx:f}}}),le=new b({props:{href:xe.BUILD_APP.href+"#using-consent",$$slots:{default:[Os]},$$scope:{ctx:f}}}),re=new b({props:{href:xe.BUILD_APP.href,$$slots:{default:[Hs]},$$scope:{ctx:f}}}),fe=new b({props:{href:"https://mycompany.demos.ioxio.com/my-company/company/0522908-2/board",$$slots:{default:[zs]},$$scope:{ctx:f}}}),Pe=new xs({props:{img:f[1].DECODED_CONSENT_TOKEN}}),Ee=new D({props:{title:"Find the JWKS URI"}}),me=new b({props:{href:"/schemas/consent-configuration/",$$slots:{default:[As]},$$scope:{ctx:f}}}),ue=new b({props:{href:"https://consent.sandbox.ioxio-dataspace.com/.well-known/dataspace/consent-configuration.json",$$slots:{default:[Ys]},$$scope:{ctx:f}}}),he=new st({props:{lang:vt,$$slots:{default:[qs]},$$scope:{ctx:f}}}),$e=new b({props:{href:"https://jwt.io",$$slots:{default:[Bs]},$$scope:{ctx:f}}}),Ae=new D({props:{title:"Find the key"}}),pe=new b({props:{href:"https://consent.sandbox.ioxio-dataspace.com/.well-known/jwks.json",$$slots:{default:[Fs]},$$scope:{ctx:f}}}),ce=new st({props:{lang:vt,$$slots:{default:[Gs]},$$scope:{ctx:f}}}),de=new b({props:{href:"https://datatracker.ietf.org/doc/html/rfc7517",$$slots:{default:[Zs]},$$scope:{ctx:f}}}),ge=new b({props:{href:"https://pyjwt.readthedocs.io/",$$slots:{default:[Rs]},$$scope:{ctx:f}}}),_e=new b({props:{href:"https://pyjwt.readthedocs.io/en/stable/usage.html#retrieve-rsa-signing-keys-from-a-jwks-endpoint",$$slots:{default:[Ds]},$$scope:{ctx:f}}}),Ye=new D({props:{title:"Caching"}}),Be=new D({props:{title:"Verifying token signature"}}),Ge=new D({props:{title:"Verifying the fields"}}),we=new b({props:{href:xe.VERIFY_ID_TOKEN.href,$$slots:{default:[Us]},$$scope:{ctx:f}}}),Ue=new D({props:{title:"Using the token"}}),Qe=new D({props:{title:"Verifying consent through API"}}),ve=new st({props:{lang:vt,$$slots:{default:[Xs]},$$scope:{ctx:f}}}),ye=new st({props:{lang:Cs,$$slots:{default:[Qs]},$$scope:{ctx:f}}}),ke=new st({props:{lang:vt,$$slots:{default:[Vs]},$$scope:{ctx:f}}}),be=new st({props:{lang:vt,$$slots:{default:[Ks]},$$scope:{ctx:f}}}),{c(){c(o.$$.fragment),n=u(),c(a.$$.fragment),k=u(),c(j.$$.fragment),yt=u(),Ce=$("p"),Ce.innerHTML=po,kt=u(),S=$("p"),vn=l("The "),c(U.$$.fragment),yn=l(`
    is a
    `),c(X.$$.fragment),kn=l(`
    that can be decoded and verified. This guide will explain in more detail the process of extracting,
    decoding and verifying it.`),bt=u(),O=$("p"),bn=l(`For more details on how to request a consent and obtaining a consent token, check out the
    `),c(Q.$$.fragment),xn=l(`
    section of the
    `),c(V.$$.fragment),Cn=l(" guide."),xt=u(),c(Te.$$.fragment),Ct=u(),Ie=$("h3"),Ie.textContent=co,Tt=u(),Le=$("p"),Le.innerHTML=go,It=u(),We=$("h3"),We.textContent=_o,Lt=u(),H=$("p"),Tn=l("The "),c(K.$$.fragment),In=l(`
    is a
    `),c(ee.$$.fragment),Ln=l("."),Wt=u(),J=$("p"),Wn=l(`If you are unfamiliar with JWTs you might want to check out the
    `),c(te.$$.fragment),jn=l(`. The same site has a
    really good tool for decoding JWTs directly in the web browser at
    `),c(ne.$$.fragment),Jn=l(`, as well as a fairly good list of different
    `),c(oe.$$.fragment),Mn=l(" for different programming languages."),jt=u(),se=$("p"),Pn=l(`You most likely want to use one of the libraries for your programming language rather than try
    to implement it according to the `),c(ae.$$.fragment),Nn=l("."),Jt=u(),je=$("p"),je.textContent=wo,Mt=u(),Je=$("p"),Je.textContent=vo,Pt=u(),c(ie.$$.fragment),Nt=u(),M=$("p"),En=l(`At the time you are reading this guide the token will, unfortunately, have expired, so some of
    the verifications we will perform here won't work. If you need a valid token, you can follow the
    steps in the `),c(le.$$.fragment),Sn=l(` section of the
    `),c(re.$$.fragment),On=l(` guide to set up your own application
    and request a consent token following the cURL examples in that guide. If you're familiar with developer
    tools in your browser you can also go to the
    `),c(fe.$$.fragment),Hn=l(" and extract the consent token from the Local Storage of your browser."),Et=u(),Me=$("p"),Me.textContent=yo,St=u(),c(Pe.$$.fragment),Ot=u(),Ne=$("p"),Ne.innerHTML=ko,Ht=u(),c(Ee.$$.fragment),zt=u(),Se=$("p"),Se.innerHTML=bo,At=u(),Oe=$("p"),Oe.innerHTML=xo,Yt=u(),x=$("p"),zn=l("In this example the "),at=$("em"),at.textContent=Co,An=l(` (Issuer) is
    `),it=$("em"),it.textContent=To,Yn=l(`, which is the consent provider of the
    sandbox dataspace. The consent provider has a
    `),c(me.$$.fragment),qn=l(` in a well-known path (inspired
    by the OpenID Connect configuration). The configuration for a consent provider can be found in the
    path `),lt=$("em"),lt.textContent=Io,Bn=l(`
    relative to the `),rt=$("em"),rt.textContent=Lo,Fn=l(`. Thus in this case the consent provider configuration can be
    fetched from
    `),c(ue.$$.fragment),Gn=l(". At the time of writing this it returned this JSON content (formatted for readability):"),qt=u(),c(he.$$.fragment),Bt=u(),He=$("p"),He.innerHTML=Wo,Ft=u(),z=$("p"),Zn=l("For convenience the JWT token also contains the "),ft=$("em"),ft.textContent=jo,Rn=l(` (JSON Web Key Set URL) header with
    the same value. This is what for example `),c($e.$$.fragment),Dn=l(` uses to fetch the key
    to verify the signature of the token.`),Gt=u(),ze=$("p"),ze.innerHTML=Jo,Zt=u(),c(Ae.$$.fragment),Rt=u(),A=$("p"),Un=l("At the time of writing this, the "),mt=$("em"),mt.textContent=Mo,Xn=u(),c(pe.$$.fragment),Qn=l(`
    returned this JSON content (formatted for readability):`),Dt=u(),c(ce.$$.fragment),Ut=u(),L=$("p"),Vn=l(`Use the key entry with a
    `),ut=$("em"),ut.textContent=Po,Kn=l(" (Key ID) and "),ht=$("em"),ht.textContent=No,eo=l(` (Algorithm) matching the values in the consent token and
    has the `),$t=$("em"),$t.textContent=Eo,to=l(" set to "),pt=$("em"),pt.textContent=So,no=l(` (signing). You can read more about JWKS in
    `),c(de.$$.fragment),oo=l("."),Xt=u(),Y=$("p"),so=l(`Some JWT libraries, like
    `),c(ge.$$.fragment),ao=l(` has built in support for
    `),c(_e.$$.fragment),io=l(`, thus it's worth checking if the library you are using has support for that before
    implementing it yourself.`),Qt=u(),c(Ye.$$.fragment),Vt=u(),qe=$("p"),qe.innerHTML=Oo,Kt=u(),c(Be.$$.fragment),en=u(),Fe=$("p"),Fe.textContent=Ho,tn=u(),c(Ge.$$.fragment),nn=u(),Ze=$("p"),Ze.innerHTML=zo,on=u(),Re=$("p"),Re.innerHTML=Ao,sn=u(),De=$("p"),De.innerHTML=Yo,an=u(),C=$("p"),lo=l(`If your data source also requires authorization, you should also see
    `),c(we.$$.fragment),ro=l(`. Check the
    `),ct=$("em"),ct.textContent=qo,fo=l(" of both tokens match and ensure the "),dt=$("em"),dt.textContent=Bo,mo=l(` in the consent token matches the
    `),gt=$("em"),gt.textContent=Fo,uo=l(`
    of the id_token and the `),_t=$("em"),_t.textContent=Go,ho=l(" in the consent token matches the "),wt=$("em"),wt.textContent=Zo,$o=l(" in the id_token."),ln=u(),c(Ue.$$.fragment),rn=u(),Xe=$("p"),Xe.innerHTML=Ro,fn=u(),c(Qe.$$.fragment),mn=u(),Ve=$("p"),Ve.innerHTML=Do,un=u(),c(ve.$$.fragment),hn=u(),Ke=$("p"),Ke.textContent=Uo,$n=u(),c(ye.$$.fragment),pn=u(),et=$("p"),et.textContent=Xo,cn=u(),c(ke.$$.fragment),dn=u(),tt=$("p"),tt.textContent=Qo,gn=u(),c(be.$$.fragment),_n=u(),nt=$("p"),nt.innerHTML=Vo},l(e){d(o.$$.fragment,e),n=h(e),d(a.$$.fragment,e),k=h(e),d(j.$$.fragment,e),yt=h(e),Ce=p(e,"P",{"data-svelte-h":!0}),y(Ce)!=="svelte-o5e9mp"&&(Ce.innerHTML=po),kt=h(e),S=p(e,"P",{});var t=P(S);vn=r(t,"The "),d(U.$$.fragment,t),yn=r(t,`
    is a
    `),d(X.$$.fragment,t),kn=r(t,`
    that can be decoded and verified. This guide will explain in more detail the process of extracting,
    decoding and verifying it.`),t.forEach(s),bt=h(e),O=p(e,"P",{});var B=P(O);bn=r(B,`For more details on how to request a consent and obtaining a consent token, check out the
    `),d(Q.$$.fragment,B),xn=r(B,`
    section of the
    `),d(V.$$.fragment,B),Cn=r(B," guide."),B.forEach(s),xt=h(e),d(Te.$$.fragment,e),Ct=h(e),Ie=p(e,"H3",{"data-svelte-h":!0}),y(Ie)!=="svelte-1fl70qp"&&(Ie.textContent=co),Tt=h(e),Le=p(e,"P",{"data-svelte-h":!0}),y(Le)!=="svelte-b5q84z"&&(Le.innerHTML=go),It=h(e),We=p(e,"H3",{"data-svelte-h":!0}),y(We)!=="svelte-85c0ge"&&(We.textContent=_o),Lt=h(e),H=p(e,"P",{});var F=P(H);Tn=r(F,"The "),d(K.$$.fragment,F),In=r(F,`
    is a
    `),d(ee.$$.fragment,F),Ln=r(F,"."),F.forEach(s),Wt=h(e),J=p(e,"P",{});var N=P(J);Wn=r(N,`If you are unfamiliar with JWTs you might want to check out the
    `),d(te.$$.fragment,N),jn=r(N,`. The same site has a
    really good tool for decoding JWTs directly in the web browser at
    `),d(ne.$$.fragment,N),Jn=r(N,`, as well as a fairly good list of different
    `),d(oe.$$.fragment,N),Mn=r(N," for different programming languages."),N.forEach(s),jt=h(e),se=p(e,"P",{});var ot=P(se);Pn=r(ot,`You most likely want to use one of the libraries for your programming language rather than try
    to implement it according to the `),d(ae.$$.fragment,ot),Nn=r(ot,"."),ot.forEach(s),Jt=h(e),je=p(e,"P",{"data-svelte-h":!0}),y(je)!=="svelte-1yri31c"&&(je.textContent=wo),Mt=h(e),Je=p(e,"P",{"data-svelte-h":!0}),y(Je)!=="svelte-g8urh1"&&(Je.textContent=vo),Pt=h(e),d(ie.$$.fragment,e),Nt=h(e),M=p(e,"P",{});var E=P(M);En=r(E,`At the time you are reading this guide the token will, unfortunately, have expired, so some of
    the verifications we will perform here won't work. If you need a valid token, you can follow the
    steps in the `),d(le.$$.fragment,E),Sn=r(E,` section of the
    `),d(re.$$.fragment,E),On=r(E,` guide to set up your own application
    and request a consent token following the cURL examples in that guide. If you're familiar with developer
    tools in your browser you can also go to the
    `),d(fe.$$.fragment,E),Hn=r(E," and extract the consent token from the Local Storage of your browser."),E.forEach(s),Et=h(e),Me=p(e,"P",{"data-svelte-h":!0}),y(Me)!=="svelte-fjyiw9"&&(Me.textContent=yo),St=h(e),d(Pe.$$.fragment,e),Ot=h(e),Ne=p(e,"P",{"data-svelte-h":!0}),y(Ne)!=="svelte-1f6w5y9"&&(Ne.innerHTML=ko),Ht=h(e),d(Ee.$$.fragment,e),zt=h(e),Se=p(e,"P",{"data-svelte-h":!0}),y(Se)!=="svelte-193qgyu"&&(Se.innerHTML=bo),At=h(e),Oe=p(e,"P",{"data-svelte-h":!0}),y(Oe)!=="svelte-2fpgwu"&&(Oe.innerHTML=xo),Yt=h(e),x=p(e,"P",{});var T=P(x);zn=r(T,"In this example the "),at=p(T,"EM",{"data-svelte-h":!0}),y(at)!=="svelte-1tsrox1"&&(at.textContent=Co),An=r(T,` (Issuer) is
    `),it=p(T,"EM",{"data-svelte-h":!0}),y(it)!=="svelte-14wfska"&&(it.textContent=To),Yn=r(T,`, which is the consent provider of the
    sandbox dataspace. The consent provider has a
    `),d(me.$$.fragment,T),qn=r(T,` in a well-known path (inspired
    by the OpenID Connect configuration). The configuration for a consent provider can be found in the
    path `),lt=p(T,"EM",{"data-svelte-h":!0}),y(lt)!=="svelte-195w7ya"&&(lt.textContent=Io),Bn=r(T,`
    relative to the `),rt=p(T,"EM",{"data-svelte-h":!0}),y(rt)!=="svelte-1tsrox1"&&(rt.textContent=Lo),Fn=r(T,`. Thus in this case the consent provider configuration can be
    fetched from
    `),d(ue.$$.fragment,T),Gn=r(T,". At the time of writing this it returned this JSON content (formatted for readability):"),T.forEach(s),qt=h(e),d(he.$$.fragment,e),Bt=h(e),He=p(e,"P",{"data-svelte-h":!0}),y(He)!=="svelte-ohf6qu"&&(He.innerHTML=Wo),Ft=h(e),z=p(e,"P",{});var G=P(z);Zn=r(G,"For convenience the JWT token also contains the "),ft=p(G,"EM",{"data-svelte-h":!0}),y(ft)!=="svelte-cfznec"&&(ft.textContent=jo),Rn=r(G,` (JSON Web Key Set URL) header with
    the same value. This is what for example `),d($e.$$.fragment,G),Dn=r(G,` uses to fetch the key
    to verify the signature of the token.`),G.forEach(s),Gt=h(e),ze=p(e,"P",{"data-svelte-h":!0}),y(ze)!=="svelte-f570y"&&(ze.innerHTML=Jo),Zt=h(e),d(Ae.$$.fragment,e),Rt=h(e),A=p(e,"P",{});var Z=P(A);Un=r(Z,"At the time of writing this, the "),mt=p(Z,"EM",{"data-svelte-h":!0}),y(mt)!=="svelte-1dggqs6"&&(mt.textContent=Mo),Xn=h(Z),d(pe.$$.fragment,Z),Qn=r(Z,`
    returned this JSON content (formatted for readability):`),Z.forEach(s),Dt=h(e),d(ce.$$.fragment,e),Ut=h(e),L=p(e,"P",{});var W=P(L);Vn=r(W,`Use the key entry with a
    `),ut=p(W,"EM",{"data-svelte-h":!0}),y(ut)!=="svelte-6cm7u2"&&(ut.textContent=Po),Kn=r(W," (Key ID) and "),ht=p(W,"EM",{"data-svelte-h":!0}),y(ht)!=="svelte-ohz2o8"&&(ht.textContent=No),eo=r(W,` (Algorithm) matching the values in the consent token and
    has the `),$t=p(W,"EM",{"data-svelte-h":!0}),y($t)!=="svelte-1ltck1j"&&($t.textContent=Eo),to=r(W," set to "),pt=p(W,"EM",{"data-svelte-h":!0}),y(pt)!=="svelte-jgnovp"&&(pt.textContent=So),no=r(W,` (signing). You can read more about JWKS in
    `),d(de.$$.fragment,W),oo=r(W,"."),W.forEach(s),Xt=h(e),Y=p(e,"P",{});var R=P(Y);so=r(R,`Some JWT libraries, like
    `),d(ge.$$.fragment,R),ao=r(R,` has built in support for
    `),d(_e.$$.fragment,R),io=r(R,`, thus it's worth checking if the library you are using has support for that before
    implementing it yourself.`),R.forEach(s),Qt=h(e),d(Ye.$$.fragment,e),Vt=h(e),qe=p(e,"P",{"data-svelte-h":!0}),y(qe)!=="svelte-yci1ef"&&(qe.innerHTML=Oo),Kt=h(e),d(Be.$$.fragment,e),en=h(e),Fe=p(e,"P",{"data-svelte-h":!0}),y(Fe)!=="svelte-g5pvaj"&&(Fe.textContent=Ho),tn=h(e),d(Ge.$$.fragment,e),nn=h(e),Ze=p(e,"P",{"data-svelte-h":!0}),y(Ze)!=="svelte-nwg2jn"&&(Ze.innerHTML=zo),on=h(e),Re=p(e,"P",{"data-svelte-h":!0}),y(Re)!=="svelte-us4gu4"&&(Re.innerHTML=Ao),sn=h(e),De=p(e,"P",{"data-svelte-h":!0}),y(De)!=="svelte-1eyf7iz"&&(De.innerHTML=Yo),an=h(e),C=p(e,"P",{});var I=P(C);lo=r(I,`If your data source also requires authorization, you should also see
    `),d(we.$$.fragment,I),ro=r(I,`. Check the
    `),ct=p(I,"EM",{"data-svelte-h":!0}),y(ct)!=="svelte-w91li0"&&(ct.textContent=qo),fo=r(I," of both tokens match and ensure the "),dt=p(I,"EM",{"data-svelte-h":!0}),y(dt)!=="svelte-1geqtnb"&&(dt.textContent=Bo),mo=r(I,` in the consent token matches the
    `),gt=p(I,"EM",{"data-svelte-h":!0}),y(gt)!=="svelte-4k3ulc"&&(gt.textContent=Fo),uo=r(I,`
    of the id_token and the `),_t=p(I,"EM",{"data-svelte-h":!0}),y(_t)!=="svelte-11p1zzx"&&(_t.textContent=Go),ho=r(I," in the consent token matches the "),wt=p(I,"EM",{"data-svelte-h":!0}),y(wt)!=="svelte-1tsrox1"&&(wt.textContent=Zo),$o=r(I," in the id_token."),I.forEach(s),ln=h(e),d(Ue.$$.fragment,e),rn=h(e),Xe=p(e,"P",{"data-svelte-h":!0}),y(Xe)!=="svelte-vbv5lf"&&(Xe.innerHTML=Ro),fn=h(e),d(Qe.$$.fragment,e),mn=h(e),Ve=p(e,"P",{"data-svelte-h":!0}),y(Ve)!=="svelte-xbouoz"&&(Ve.innerHTML=Do),un=h(e),d(ve.$$.fragment,e),hn=h(e),Ke=p(e,"P",{"data-svelte-h":!0}),y(Ke)!=="svelte-1cthmfz"&&(Ke.textContent=Uo),$n=h(e),d(ye.$$.fragment,e),pn=h(e),et=p(e,"P",{"data-svelte-h":!0}),y(et)!=="svelte-1sec7f4"&&(et.textContent=Xo),cn=h(e),d(ke.$$.fragment,e),dn=h(e),tt=p(e,"P",{"data-svelte-h":!0}),y(tt)!=="svelte-zxa3k3"&&(tt.textContent=Qo),gn=h(e),d(be.$$.fragment,e),_n=h(e),nt=p(e,"P",{"data-svelte-h":!0}),y(nt)!=="svelte-136m4bb"&&(nt.innerHTML=Vo)},m(e,t){g(o,e,t),i(e,n,t),g(a,e,t),i(e,k,t),g(j,e,t),i(e,yt,t),i(e,Ce,t),i(e,kt,t),i(e,S,t),m(S,vn),g(U,S,null),m(S,yn),g(X,S,null),m(S,kn),i(e,bt,t),i(e,O,t),m(O,bn),g(Q,O,null),m(O,xn),g(V,O,null),m(O,Cn),i(e,xt,t),g(Te,e,t),i(e,Ct,t),i(e,Ie,t),i(e,Tt,t),i(e,Le,t),i(e,It,t),i(e,We,t),i(e,Lt,t),i(e,H,t),m(H,Tn),g(K,H,null),m(H,In),g(ee,H,null),m(H,Ln),i(e,Wt,t),i(e,J,t),m(J,Wn),g(te,J,null),m(J,jn),g(ne,J,null),m(J,Jn),g(oe,J,null),m(J,Mn),i(e,jt,t),i(e,se,t),m(se,Pn),g(ae,se,null),m(se,Nn),i(e,Jt,t),i(e,je,t),i(e,Mt,t),i(e,Je,t),i(e,Pt,t),g(ie,e,t),i(e,Nt,t),i(e,M,t),m(M,En),g(le,M,null),m(M,Sn),g(re,M,null),m(M,On),g(fe,M,null),m(M,Hn),i(e,Et,t),i(e,Me,t),i(e,St,t),g(Pe,e,t),i(e,Ot,t),i(e,Ne,t),i(e,Ht,t),g(Ee,e,t),i(e,zt,t),i(e,Se,t),i(e,At,t),i(e,Oe,t),i(e,Yt,t),i(e,x,t),m(x,zn),m(x,at),m(x,An),m(x,it),m(x,Yn),g(me,x,null),m(x,qn),m(x,lt),m(x,Bn),m(x,rt),m(x,Fn),g(ue,x,null),m(x,Gn),i(e,qt,t),g(he,e,t),i(e,Bt,t),i(e,He,t),i(e,Ft,t),i(e,z,t),m(z,Zn),m(z,ft),m(z,Rn),g($e,z,null),m(z,Dn),i(e,Gt,t),i(e,ze,t),i(e,Zt,t),g(Ae,e,t),i(e,Rt,t),i(e,A,t),m(A,Un),m(A,mt),m(A,Xn),g(pe,A,null),m(A,Qn),i(e,Dt,t),g(ce,e,t),i(e,Ut,t),i(e,L,t),m(L,Vn),m(L,ut),m(L,Kn),m(L,ht),m(L,eo),m(L,$t),m(L,to),m(L,pt),m(L,no),g(de,L,null),m(L,oo),i(e,Xt,t),i(e,Y,t),m(Y,so),g(ge,Y,null),m(Y,ao),g(_e,Y,null),m(Y,io),i(e,Qt,t),g(Ye,e,t),i(e,Vt,t),i(e,qe,t),i(e,Kt,t),g(Be,e,t),i(e,en,t),i(e,Fe,t),i(e,tn,t),g(Ge,e,t),i(e,nn,t),i(e,Ze,t),i(e,on,t),i(e,Re,t),i(e,sn,t),i(e,De,t),i(e,an,t),i(e,C,t),m(C,lo),g(we,C,null),m(C,ro),m(C,ct),m(C,fo),m(C,dt),m(C,mo),m(C,gt),m(C,uo),m(C,_t),m(C,ho),m(C,wt),m(C,$o),i(e,ln,t),g(Ue,e,t),i(e,rn,t),i(e,Xe,t),i(e,fn,t),g(Qe,e,t),i(e,mn,t),i(e,Ve,t),i(e,un,t),g(ve,e,t),i(e,hn,t),i(e,Ke,t),i(e,$n,t),g(ye,e,t),i(e,pn,t),i(e,et,t),i(e,cn,t),g(ke,e,t),i(e,dn,t),i(e,tt,t),i(e,gn,t),g(be,e,t),i(e,_n,t),i(e,nt,t),wn=!0},p(e,t){const B={};t&1&&(B.title=e[0].guide.title),o.$set(B);const F={};t&1&&(F.path=e[0].path),a.$set(F);const N={};t&4&&(N.$$scope={dirty:t,ctx:e}),U.$set(N);const ot={};t&4&&(ot.$$scope={dirty:t,ctx:e}),X.$set(ot);const E={};t&4&&(E.$$scope={dirty:t,ctx:e}),Q.$set(E);const T={};t&4&&(T.$$scope={dirty:t,ctx:e}),V.$set(T);const G={};t&4&&(G.$$scope={dirty:t,ctx:e}),K.$set(G);const Z={};t&4&&(Z.$$scope={dirty:t,ctx:e}),ee.$set(Z);const W={};t&4&&(W.$$scope={dirty:t,ctx:e}),te.$set(W);const R={};t&4&&(R.$$scope={dirty:t,ctx:e}),ne.$set(R);const I={};t&4&&(I.$$scope={dirty:t,ctx:e}),oe.$set(I);const Ko={};t&4&&(Ko.$$scope={dirty:t,ctx:e}),ae.$set(Ko);const es={};t&4&&(es.$$scope={dirty:t,ctx:e}),ie.$set(es);const ts={};t&4&&(ts.$$scope={dirty:t,ctx:e}),le.$set(ts);const ns={};t&4&&(ns.$$scope={dirty:t,ctx:e}),re.$set(ns);const os={};t&4&&(os.$$scope={dirty:t,ctx:e}),fe.$set(os);const ss={};t&4&&(ss.$$scope={dirty:t,ctx:e}),me.$set(ss);const as={};t&4&&(as.$$scope={dirty:t,ctx:e}),ue.$set(as);const is={};t&4&&(is.$$scope={dirty:t,ctx:e}),he.$set(is);const ls={};t&4&&(ls.$$scope={dirty:t,ctx:e}),$e.$set(ls);const rs={};t&4&&(rs.$$scope={dirty:t,ctx:e}),pe.$set(rs);const fs={};t&4&&(fs.$$scope={dirty:t,ctx:e}),ce.$set(fs);const ms={};t&4&&(ms.$$scope={dirty:t,ctx:e}),de.$set(ms);const us={};t&4&&(us.$$scope={dirty:t,ctx:e}),ge.$set(us);const hs={};t&4&&(hs.$$scope={dirty:t,ctx:e}),_e.$set(hs);const $s={};t&4&&($s.$$scope={dirty:t,ctx:e}),we.$set($s);const ps={};t&4&&(ps.$$scope={dirty:t,ctx:e}),ve.$set(ps);const cs={};t&4&&(cs.$$scope={dirty:t,ctx:e}),ye.$set(cs);const ds={};t&4&&(ds.$$scope={dirty:t,ctx:e}),ke.$set(ds);const gs={};t&4&&(gs.$$scope={dirty:t,ctx:e}),be.$set(gs)},i(e){wn||(_(o.$$.fragment,e),_(a.$$.fragment,e),_(j.$$.fragment,e),_(U.$$.fragment,e),_(X.$$.fragment,e),_(Q.$$.fragment,e),_(V.$$.fragment,e),_(Te.$$.fragment,e),_(K.$$.fragment,e),_(ee.$$.fragment,e),_(te.$$.fragment,e),_(ne.$$.fragment,e),_(oe.$$.fragment,e),_(ae.$$.fragment,e),_(ie.$$.fragment,e),_(le.$$.fragment,e),_(re.$$.fragment,e),_(fe.$$.fragment,e),_(Pe.$$.fragment,e),_(Ee.$$.fragment,e),_(me.$$.fragment,e),_(ue.$$.fragment,e),_(he.$$.fragment,e),_($e.$$.fragment,e),_(Ae.$$.fragment,e),_(pe.$$.fragment,e),_(ce.$$.fragment,e),_(de.$$.fragment,e),_(ge.$$.fragment,e),_(_e.$$.fragment,e),_(Ye.$$.fragment,e),_(Be.$$.fragment,e),_(Ge.$$.fragment,e),_(we.$$.fragment,e),_(Ue.$$.fragment,e),_(Qe.$$.fragment,e),_(ve.$$.fragment,e),_(ye.$$.fragment,e),_(ke.$$.fragment,e),_(be.$$.fragment,e),wn=!0)},o(e){w(o.$$.fragment,e),w(a.$$.fragment,e),w(j.$$.fragment,e),w(U.$$.fragment,e),w(X.$$.fragment,e),w(Q.$$.fragment,e),w(V.$$.fragment,e),w(Te.$$.fragment,e),w(K.$$.fragment,e),w(ee.$$.fragment,e),w(te.$$.fragment,e),w(ne.$$.fragment,e),w(oe.$$.fragment,e),w(ae.$$.fragment,e),w(ie.$$.fragment,e),w(le.$$.fragment,e),w(re.$$.fragment,e),w(fe.$$.fragment,e),w(Pe.$$.fragment,e),w(Ee.$$.fragment,e),w(me.$$.fragment,e),w(ue.$$.fragment,e),w(he.$$.fragment,e),w($e.$$.fragment,e),w(Ae.$$.fragment,e),w(pe.$$.fragment,e),w(ce.$$.fragment,e),w(de.$$.fragment,e),w(ge.$$.fragment,e),w(_e.$$.fragment,e),w(Ye.$$.fragment,e),w(Be.$$.fragment,e),w(Ge.$$.fragment,e),w(we.$$.fragment,e),w(Ue.$$.fragment,e),w(Qe.$$.fragment,e),w(ve.$$.fragment,e),w(ye.$$.fragment,e),w(ke.$$.fragment,e),w(be.$$.fragment,e),wn=!1},d(e){e&&(s(n),s(k),s(yt),s(Ce),s(kt),s(S),s(bt),s(O),s(xt),s(Ct),s(Ie),s(Tt),s(Le),s(It),s(We),s(Lt),s(H),s(Wt),s(J),s(jt),s(se),s(Jt),s(je),s(Mt),s(Je),s(Pt),s(Nt),s(M),s(Et),s(Me),s(St),s(Ot),s(Ne),s(Ht),s(zt),s(Se),s(At),s(Oe),s(Yt),s(x),s(qt),s(Bt),s(He),s(Ft),s(z),s(Gt),s(ze),s(Zt),s(Rt),s(A),s(Dt),s(Ut),s(L),s(Xt),s(Y),s(Qt),s(Vt),s(qe),s(Kt),s(en),s(Fe),s(tn),s(nn),s(Ze),s(on),s(Re),s(sn),s(De),s(an),s(C),s(ln),s(rn),s(Xe),s(fn),s(mn),s(Ve),s(un),s(hn),s(Ke),s($n),s(pn),s(et),s(cn),s(dn),s(tt),s(gn),s(_n),s(nt)),v(o,e),v(a,e),v(j,e),v(U),v(X),v(Q),v(V),v(Te,e),v(K),v(ee),v(te),v(ne),v(oe),v(ae),v(ie,e),v(le),v(re),v(fe),v(Pe,e),v(Ee,e),v(me),v(ue),v(he,e),v($e),v(Ae,e),v(pe),v(ce,e),v(de),v(ge),v(_e),v(Ye,e),v(Be,e),v(Ge,e),v(we),v(Ue,e),v(Qe,e),v(ve,e),v(ye,e),v(ke,e),v(be,e)}}}function ta(f){let o,n;return o=new ys({props:{$$slots:{default:[ea]},$$scope:{ctx:f}}}),{c(){c(o.$$.fragment)},l(a){d(o.$$.fragment,a)},m(a,k){g(o,a,k),n=!0},p(a,[k]){const j={};k&5&&(j.$$scope={dirty:k,ctx:a}),o.$set(j)},i(a){n||(_(o.$$.fragment,a),n=!0)},o(a){w(o.$$.fragment,a),n=!1},d(a){v(o,a)}}}function na(f,o,n){let{data:a}=o;const k=a.images;return f.$$set=j=>{"data"in j&&n(0,a=j.data)},[a,k]}class $a extends ws{constructor(o){super(),vs(this,o,na,ta,_s,{data:0})}}export{$a as component};
